<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周艳伟</title>
  
  <subtitle>Zyw Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhouyanwei.cn/"/>
  <updated>2019-05-20T11:03:57.740Z</updated>
  <id>http://zhouyanwei.cn/</id>
  
  <author>
    <name>Zyw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins + publish over ssh 插件进行web前端自动化打包和部署</title>
    <link href="http://zhouyanwei.cn/2019/05/20/2019-5-20-Jenkins/"/>
    <id>http://zhouyanwei.cn/2019/05/20/2019-5-20-Jenkins/</id>
    <published>2019-05-19T16:00:00.000Z</published>
    <updated>2019-05-20T11:03:57.740Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有有更新了，换个工作一直忙，今天研究了一下前端测试环境自动化部署，再次记录，方便以后查阅。</p><a id="more"></a><h2 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h2><p>第一步就是先安装Jenkins，这里以mac系统为例，实际都是大同小异的。</p><p>通过 homebrew 安装 Jenkins, 建议通过命令安装，如果使用安装包安装，会涉及到权限问题服务启动不了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenkins</span><br></pre></td></tr></table></figure><p>如果没有安装homebrew，请参考这里<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">https://brew.sh/index_zh-cn</a></p><p>安装好了之后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenkins</span><br></pre></td></tr></table></figure><p>浏览器访问,进入页面稍等一会。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[http://localhost:8080](http://localhost:8080)</span><br></pre></td></tr></table></figure><p>因为我在安装的时候忘记截图了，所以就盗用了别人的图。</p><p>首先按照他的路径找到密码粘贴进去。</p><p><img src="/images/2019-05-20/1.png" alt="1"></p><p>然后创建一个用户，方便以后好登陆。</p><p><img src="/images/2019-05-20/2.png" alt="2"></p><p>在配置最后一个页面就可以了。</p><p><img src="/images/2019-05-20/3.png" alt="3"></p><p>记得还有一个选择插件的页面，用默认的就好了。</p><h2 id="建一个item进行自动化打包"><a href="#建一个item进行自动化打包" class="headerlink" title="建一个item进行自动化打包"></a>建一个item进行自动化打包</h2><p>进入jenkins主页面是这样的。</p><p><img src="/images/2019-05-20/4.jpg" alt="4"></p><p>点击新建item</p><p><img src="/images/2019-05-20/5.png" alt="5"></p><p>确定后进入配置页面</p><p>General配置</p><p><img src="/images/2019-05-20/6.png" alt="6"></p><p>源码管理配置</p><p>因为我们目前还在使用svn，所以选择SVN，马上要开新项目，要使git了，配置应该不会又太大变化。</p><p><img src="/images/2019-05-20/7.png" alt="7"></p><p>构建触发器配置</p><p>这个就看自己的需要了。</p><p><img src="/images/2019-05-20/8.png" alt="8"></p><p>构建环境配置</p><p><img src="/images/2019-05-20/9.png" alt="9"></p><p>构建配置</p><p><img src="/images/2019-05-20/10.png" alt="10"><br><img src="/images/2019-05-20/11.png" alt="11"></p><p>注意一下红色提示</p><p>此处配置完成后就可以进行build打包了。</p><p><img src="/images/2019-05-20/12.png" alt="12"></p><p>然后我们进入jenkins目录文件，就可以看见项目和打包好的dist文件夹了。我的目录是</p><pre><code class="bash">/Users/zhouyanwei/.jenkins/workspace/<span class="built_in">test</span></code></pre><p>到此已经实现了自动化打包，接下来就是配置如何实现自动化上传到测试服务器上。</p><h2 id="publish-over-ssh-插件进行自动化部署"><a href="#publish-over-ssh-插件进行自动化部署" class="headerlink" title="publish over ssh 插件进行自动化部署"></a>publish over ssh 插件进行自动化部署</h2><p>首先我们先安装插件，因为我已经安装了。</p><p><img src="/images/2019-05-20/13.png" alt="13"><br><img src="/images/2019-05-20/14.png" alt="14"></p><p>安装好了之后进行Publish over SSH配置</p><p><img src="/images/2019-05-20/15.png" alt="15"></p><p>进入后找到 Publish over SSH 项</p><p>在进行SSH配置的时候，我了解到有两种方法，第一种是使用秘钥进行进行传输，还有一种就是我使用的账号密码进行传输。</p><p><img src="/images/2019-05-20/16.png" alt="16"></p><p>别忘记保存，应用。</p><p>然后我们回到我们的项目配置，进行构建后操作配置</p><p>构建后操作配置</p><p><img src="/images/2019-05-20/17.png" alt="17"><br><img src="/images/2019-05-20/18.png" alt="18"></p><p>别忘记保存，应用。</p><p>然后我们回到项目首页 Build Now 就可以了，完成后就会自动打包进行服务器更新了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有有更新了，换个工作一直忙，今天研究了一下前端测试环境自动化部署，再次记录，方便以后查阅。&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://zhouyanwei.cn/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://zhouyanwei.cn/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>双向绑定</title>
    <link href="http://zhouyanwei.cn/2019/03/12/2019-3-12-proxy/"/>
    <id>http://zhouyanwei.cn/2019/03/12/2019-3-12-proxy/</id>
    <published>2019-03-11T16:00:00.000Z</published>
    <updated>2019-03-12T06:11:50.082Z</updated>
    
    <content type="html"><![CDATA[<p>最简单的双向数据绑定的实现，开始通过使用Object.defineProperty()，到ES6新增的Proxy的实现。</p><a id="more"></a><p>HTML<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"inputTxt"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"showTxt"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">Object.defineProperty(obj, <span class="string">'txt'</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> obj;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">set</span>: <span class="keyword">function</span> (newValue) &#123;</span><br><span class="line">        document.getElementById(<span class="string">'inputTxt'</span>).value = newValue;</span><br><span class="line">        document.getElementById(<span class="string">'showTxt'</span>).value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">document.addEventListener(<span class="string">'keydown'</span>, <span class="keyword">function</span> (e) &#123;</span><br><span class="line">    obj.txt = e.target.value;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;&#125;;</span><br><span class="line">const aProxy = new Proxy(obj, &#123;</span><br><span class="line">    get: <span class="keyword">function</span>(target, key, receiver)&#123;</span><br><span class="line">        <span class="built_in">return</span> Reflect.get(target, key, receiver);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">set</span>: <span class="keyword">function</span> (target, key, value, receiver) &#123;</span><br><span class="line">        <span class="keyword">if</span>(key === <span class="string">'txt'</span> &amp;&amp; value !== undefined) &#123;</span><br><span class="line">            document.getElementById(<span class="string">'inputTxt'</span>).value = value;</span><br><span class="line">            document.getElementById(<span class="string">'showTxt'</span>).value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> Reflect.set(target, key, value, receiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">document.addEventListener(<span class="string">'keydown'</span>, <span class="keyword">function</span> (e) &#123;</span><br><span class="line">    aProxy.txt = e.target.value;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最简单的双向数据绑定的实现，开始通过使用Object.defineProperty()，到ES6新增的Proxy的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="Object.defineProperty()" scheme="http://zhouyanwei.cn/tags/Object-defineProperty/"/>
    
      <category term="Proxy" scheme="http://zhouyanwei.cn/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>闭包与继承</title>
    <link href="http://zhouyanwei.cn/2019/03/04/2019-3-4-inherit/"/>
    <id>http://zhouyanwei.cn/2019/03/04/2019-3-4-inherit/</id>
    <published>2019-03-03T16:00:00.000Z</published>
    <updated>2019-03-04T08:43:35.131Z</updated>
    
    <content type="html"><![CDATA[<p>闭包与继承组合学习，加深记忆。</p><a id="more"></a><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>通过一个函数，能够访问另一个函数作用域的变量的函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">init</span></span>() &#123;</span><br><span class="line">    var name = <span class="string">"Mozilla"</span>; // name 是一个被 init 创建的局部变量</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">displayName</span></span>() &#123; // displayName() 是内部函数,一个闭包</span><br><span class="line">        alert(name); // 使用了父函数中声明的变量</span><br><span class="line">    &#125;</span><br><span class="line">    displayName();</span><br><span class="line">&#125;</span><br><span class="line">init();//Mozilla</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> a(x) &#123;</span><br><span class="line">    var y = 4;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">b</span></span>() &#123;</span><br><span class="line">        console.log(x+y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">var c = a(3)</span><br><span class="line">c() // 7</span><br></pre></td></tr></table></figure><h1 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h1><h2 id="call-apply方式-构造函数绑定"><a href="#call-apply方式-构造函数绑定" class="headerlink" title="call apply方式 构造函数绑定"></a>call apply方式 构造函数绑定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Animal</span></span>() &#123;</span><br><span class="line">    this.species = <span class="string">'动物'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Cat(name, color) &#123;</span><br><span class="line">    Animal.apply(this, arguments)</span><br><span class="line">    this.name = name</span><br><span class="line">    this.color = color</span><br><span class="line">&#125;</span><br><span class="line">var cat1 = new Cat(<span class="string">'大俊'</span>, <span class="string">'黑色'</span>)</span><br><span class="line">console.log(cat1.species) //动物</span><br></pre></td></tr></table></figure><p>使用call和apply借用其他构造函数的成员, 可以解决给父构造函数传递参数的问题, 但是获取不到父构造函数原型上的成员.也不存在共享问题.</p><h2 id="prototype模式"><a href="#prototype模式" class="headerlink" title="prototype模式"></a>prototype模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Animal</span></span>() &#123;</span><br><span class="line">    this.species = <span class="string">'动物'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Cat(name, color) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.color = color</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = new Animal();</span><br><span class="line">Cat.prototype.constructor = Cat</span><br><span class="line">var cat1 = new Cat(<span class="string">'大俊'</span>, <span class="string">'黑色'</span>)</span><br><span class="line">console.log(cat1.species) //动物</span><br></pre></td></tr></table></figure><p>问题是不能给父构造函数传递参数, 父子构造函数的原型对象之间有共享问题.</p><h2 id="直接继承prototype"><a href="#直接继承prototype" class="headerlink" title="直接继承prototype"></a>直接继承prototype</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Animal</span></span>() &#123;&#125;</span><br><span class="line">Animal.prototype.species = <span class="string">'动物'</span></span><br><span class="line"><span class="keyword">function</span> Cat(name, color) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.color = color</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = Animal.prototype</span><br><span class="line">Cat.prototype.constructor = Cat</span><br><span class="line">var cat1 = new Cat(<span class="string">'大俊'</span>, <span class="string">'黑色'</span>)</span><br><span class="line">console.log(cat1.species) //动物</span><br><span class="line">console.log(Animal.prototype.constructor) //Cat</span><br></pre></td></tr></table></figure><p>缺点是 Cat.prototype和Animal.prototype,现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。<br>只能继承父构造函数的原型对象上的成员, 不能继承父构造函数的实例对象的成员, 同时父构造函数的原型对象和子构造函数的原型对象上的成员有共享问题</p><h2 id="利用空对象作为中介"><a href="#利用空对象作为中介" class="headerlink" title="利用空对象作为中介"></a>利用空对象作为中介</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Animal</span></span>() &#123;&#125;</span><br><span class="line">Animal.prototype.species = <span class="string">'动物'</span></span><br><span class="line"><span class="keyword">function</span> Cat(name, color) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.color = color</span><br><span class="line">&#125;</span><br><span class="line">var F = <span class="function"><span class="title">function</span></span> () &#123;&#125;</span><br><span class="line">F.prototype = Animal.prototype</span><br><span class="line">Cat.prototype = new F()</span><br><span class="line">Cat.prototype.constructor = Cat</span><br><span class="line">var cat1 = new Cat(<span class="string">'大俊'</span>, <span class="string">'黑色'</span>)</span><br><span class="line">console.log(cat1.species)//动物</span><br><span class="line">//封装</span><br><span class="line"><span class="keyword">function</span> extend(Child, Parent) &#123;</span><br><span class="line">    var F = <span class="function"><span class="title">function</span></span> () &#123;&#125;</span><br><span class="line">    F.prototype = Parent.prototype</span><br><span class="line">    Child.prototype = new F()</span><br><span class="line">    Child.prototype.constructor = Child</span><br><span class="line">    Child.uber = Parent.prototype//为子对象设一个uber属性，</span><br><span class="line">    // 这个属性直接指向父对象的prototype属性为了实现继承的完备性，纯属备用性质。</span><br><span class="line">&#125;</span><br><span class="line">//使用</span><br><span class="line">extend(Cat, Animal)</span><br><span class="line">var cat1 = new Cat(<span class="string">'大俊'</span>, <span class="string">'黑色'</span>)</span><br><span class="line">console.log(cat1.species)//动物</span><br></pre></td></tr></table></figure><h2 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Animal</span></span>() &#123;&#125;</span><br><span class="line">Animal.prototype.species = <span class="string">'动物'</span></span><br><span class="line"><span class="keyword">function</span> Cat(name, color) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.color = color</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> extend2(Child, Parent)&#123;</span><br><span class="line">    var p = Parent.prototype</span><br><span class="line">    var c = Child.prototype</span><br><span class="line">    <span class="keyword">for</span>(var x <span class="keyword">in</span> p)&#123;</span><br><span class="line">        c[x] = p[x]</span><br><span class="line">    &#125;</span><br><span class="line">    c.uber = p</span><br><span class="line">&#125;</span><br><span class="line">extend2(Cat, Animal)</span><br><span class="line">var cat1 = new Cat()</span><br><span class="line">console.log(cat1.species)</span><br></pre></td></tr></table></figure><p>拷贝继承的问题,如果继承过来的成员是引用类型的话,那么这个引用类型的成员在父对象和子对象之间是共享的,也就是说修改了之后, 父子对象都会受到影响.</p><h1 id="非构造函数继承"><a href="#非构造函数继承" class="headerlink" title="非构造函数继承"></a>非构造函数继承</h1><h2 id="object-方法"><a href="#object-方法" class="headerlink" title="object()方法"></a>object()方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var Animal = &#123;</span><br><span class="line">   species: <span class="string">"动物"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> object(o) &#123;</span><br><span class="line">   <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>() &#123;&#125;</span><br><span class="line">   F.prototype = o;</span><br><span class="line">   <span class="built_in">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line">var Cat = object(Animal);</span><br><span class="line">Cat.name = <span class="string">"大俊"</span>;</span><br><span class="line">console.log(Cat.species)//动物</span><br></pre></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var Animal = &#123;</span><br><span class="line">   species: <span class="string">"动物"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> extendCopy(p) &#123;</span><br><span class="line">   var c = &#123;&#125;;</span><br><span class="line">   <span class="keyword">for</span> (var i <span class="keyword">in</span> p) &#123;</span><br><span class="line">       c[i] = p[i];</span><br><span class="line">   &#125;</span><br><span class="line">   c.uber = p;</span><br><span class="line">   <span class="built_in">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">var Cat = extendCopy(Animal);</span><br><span class="line">Cat.name = <span class="string">"大俊"</span>;</span><br><span class="line">console.log(Cat)//动物</span><br><span class="line"></span><br><span class="line">这样的拷贝有一个问题。那就是，如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址，而不是真正拷贝，因此存在父对象被篡改的可能。</span><br><span class="line">var Animal = &#123;</span><br><span class="line">   species: <span class="string">"动物"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> extendCopy(p) &#123;</span><br><span class="line">   var c = &#123;&#125;;</span><br><span class="line">   <span class="keyword">for</span> (var i <span class="keyword">in</span> p) &#123;</span><br><span class="line">       c[i] = p[i];</span><br><span class="line">   &#125;</span><br><span class="line">   c.uber = p;</span><br><span class="line">   <span class="built_in">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">Animal.do = [<span class="string">"吃"</span>, <span class="string">"喝"</span>];</span><br><span class="line">var Cat = extendCopy(Animal);</span><br><span class="line">Cat.do.push(<span class="string">"睡觉"</span>);</span><br><span class="line">console.log(Cat.do)//[<span class="string">"吃"</span>, <span class="string">"喝"</span>, <span class="string">"睡觉"</span>]</span><br><span class="line">console.log(Animal.do)//[<span class="string">"吃"</span>, <span class="string">"喝"</span>, <span class="string">"睡觉"</span>]</span><br></pre></td></tr></table></figure><h2 id="3、深拷贝"><a href="#3、深拷贝" class="headerlink" title="3、深拷贝"></a>3、深拷贝</h2><p>深拷贝，就是能够实现真正意义上的数组和对象的拷贝。递归调用”浅拷贝”就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var Animal = &#123;</span><br><span class="line">   species: <span class="string">"动物"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> deepCopy(p, c) &#123;</span><br><span class="line">   var c = c || &#123;&#125;;</span><br><span class="line">   <span class="keyword">for</span> (var i <span class="keyword">in</span> p) &#123;</span><br><span class="line">       <span class="keyword">if</span> (typeof p[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">           c[i] = (p[i].constructor === Array) ? [] : &#123;&#125;;</span><br><span class="line">           deepCopy(p[i], c[i]);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           c[i] = p[i];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">Animal.do = [<span class="string">"吃"</span>, <span class="string">"喝"</span>];</span><br><span class="line">var Cat = deepCopy(Animal);</span><br><span class="line">Cat.do.push(<span class="string">"睡觉"</span>);</span><br><span class="line">console.log(Cat.do)//[<span class="string">"吃"</span>, <span class="string">"喝"</span>, <span class="string">"睡觉"</span>]</span><br><span class="line">console.log(Animal.do)//[<span class="string">"吃"</span>, <span class="string">"喝"</span>]</span><br></pre></td></tr></table></figure><p>学习地址<br><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html</a>;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闭包与继承组合学习，加深记忆。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="闭包" scheme="http://zhouyanwei.cn/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="继承" scheme="http://zhouyanwei.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>判断数据类型</title>
    <link href="http://zhouyanwei.cn/2019/02/25/2019-2-25-typeof/"/>
    <id>http://zhouyanwei.cn/2019/02/25/2019-2-25-typeof/</id>
    <published>2019-02-24T16:00:00.000Z</published>
    <updated>2019-03-04T08:10:28.696Z</updated>
    
    <content type="html"><![CDATA[<p>判断类型、构造函数、对象属性等，记录到一起，方便记忆学习。</p><a id="more"></a><h1 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h1><p>操作符返回一个字符串，表示未经计算的操作数的类型，其实就是判断参数是什么类型的实例。</p><p>一般返回以下几种结果：”number”、”string”、”boolean”、”object”、”function” 和 “undefined”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof 123) //number</span><br><span class="line">console.log(typeof (1+2)) //number</span><br><span class="line">console.log(typeof NaN) //number</span><br><span class="line">console.log(typeof Number(6)) //number</span><br><span class="line">console.log(typeof Infinity) //number</span><br><span class="line"></span><br><span class="line">console.log(typeof <span class="string">""</span>) //string</span><br><span class="line">console.log(typeof <span class="string">"zyw"</span>) //string</span><br><span class="line">console.log(typeof (typeof <span class="string">"zyw"</span>)) //string</span><br><span class="line"></span><br><span class="line">console.log(typeof <span class="literal">true</span>) //boolean</span><br><span class="line">console.log(typeof <span class="literal">false</span>) //boolean</span><br><span class="line">    </span><br><span class="line">console.log(typeof &#123;name:<span class="string">'zyw'</span>&#125;) //object</span><br><span class="line">console.log(typeof [<span class="string">'z'</span>, <span class="string">'y'</span>, <span class="string">'w'</span>]) //object</span><br><span class="line">console.log(typeof new Date()) //object</span><br><span class="line"></span><br><span class="line">console.log(typeof <span class="function"><span class="title">function</span></span>()&#123;&#125;) //<span class="keyword">function</span></span><br><span class="line"></span><br><span class="line">console.log(typeof undefined) //undefined</span><br><span class="line">console.log(typeof zyw) //undefined zyw未定义</span><br></pre></td></tr></table></figure><h1 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h1><p>用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</p><p>注意上面数组和对象返回的都是object，这时就需要使用instanceof来判断了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">console.log([<span class="string">'z'</span>, <span class="string">'y'</span>, <span class="string">'w'</span>] instanceof Array) //<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">// 定义构造函数</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">C</span></span>()&#123;&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">D</span></span>()&#123;&#125; </span><br><span class="line">var o = new C();</span><br><span class="line">o instanceof C; // <span class="literal">true</span>，因为 Object.getPrototypeOf(o) === C.prototype</span><br><span class="line">o instanceof D; // <span class="literal">false</span>，因为 D.prototype不在o的原型链上</span><br><span class="line">o instanceof Object; // <span class="literal">true</span>,因为Object.prototype.isPrototypeOf(o)返回<span class="literal">true</span></span><br><span class="line">C.prototype instanceof Object // <span class="literal">true</span>,同上</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">"zyw"</span> instanceof String) //<span class="literal">false</span></span><br><span class="line">console.log(new String() instanceof String) //<span class="literal">true</span></span><br><span class="line">console.log(new String(<span class="string">"zyw"</span>) instanceof String) //<span class="literal">true</span></span><br><span class="line">console.log(new Date() instanceof String) //<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">console.log(new String(<span class="string">"zyw"</span>) instanceof Object) //<span class="literal">true</span></span><br><span class="line">console.log(&#123;&#125; instanceof Object) //<span class="literal">true</span></span><br><span class="line">console.log(Object.create(null) instanceof Object) //<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">console.log(new Date() instanceof Date) //<span class="literal">true</span></span><br><span class="line">console.log(new String() instanceof Date) //<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">console.log(new Date() instanceof Object) //<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h1 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h1><p>返回一个布尔值，指示对象自身属性中是否具有指定的属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">o = new Object();</span><br><span class="line">o.prop = <span class="string">'exists'</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">changeO</span></span>() &#123;</span><br><span class="line">  o.newprop = o.prop;</span><br><span class="line">  delete o.prop;</span><br><span class="line">&#125;</span><br><span class="line">o.hasOwnProperty(<span class="string">'prop'</span>);   // 返回 <span class="literal">true</span></span><br><span class="line">changeO();</span><br><span class="line">o.hasOwnProperty(<span class="string">'prop'</span>);   // 返回 <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h1><p>常用于判断浏览器内置对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log( Object.prototype.toString.call(<span class="string">'zyw'</span>)) //[object String]</span><br><span class="line">console.log( Object.prototype.toString.call(123)) //[object Number]</span><br><span class="line">console.log( Object.prototype.toString.call(Symbol(123))) //[object Symbol]</span><br><span class="line">console.log( Object.prototype.toString.call(null)) //[object Null]</span><br><span class="line">console.log( Object.prototype.toString.call(undefined)) //[object Undefined]</span><br><span class="line">console.log( Object.prototype.toString.call(<span class="function"><span class="title">function</span></span> () &#123;&#125;)) //[object Function]</span><br><span class="line">console.log( Object.prototype.toString.call(&#123;name: <span class="string">'zyw'</span>&#125;)) //[object Object]</span><br></pre></td></tr></table></figure><h1 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h1><p>用来判断对象是否为数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="string">'z'</span>, <span class="string">'y'</span>, <span class="string">'w'</span>]</span><br><span class="line">console.log(Array.isArray(arr))//<span class="literal">true</span></span><br><span class="line">var obj = &#123;name: <span class="string">'zyw'</span>&#125;</span><br><span class="line">console.log(Array.isArray(obj))//<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>参考网址：MDN</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;判断类型、构造函数、对象属性等，记录到一起，方便记忆学习。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="typeof" scheme="http://zhouyanwei.cn/tags/typeof/"/>
    
      <category term="instanceof" scheme="http://zhouyanwei.cn/tags/instanceof/"/>
    
      <category term="hasOwnProperty" scheme="http://zhouyanwei.cn/tags/hasOwnProperty/"/>
    
      <category term="Object.prototype.toString.call()" scheme="http://zhouyanwei.cn/tags/Object-prototype-toString-call/"/>
    
      <category term="isArray" scheme="http://zhouyanwei.cn/tags/isArray/"/>
    
  </entry>
  
  <entry>
    <title>blob兼容性问题</title>
    <link href="http://zhouyanwei.cn/2018/12/26/toBlob/"/>
    <id>http://zhouyanwei.cn/2018/12/26/toBlob/</id>
    <published>2018-12-25T16:00:00.000Z</published>
    <updated>2018-12-26T08:48:42.392Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇文章，图片在谷歌浏览器上使用的时候没有问题，但是在手机上测试的时候就卡在那不动了，然后我测试了安卓我们的app和手机自带浏览器都不行，又测试了苹果我们的app不行，微信和safari是可以的。</p><p>然后我就和我们的安卓小哥说让他帮我看看log,结果发现canvas.toBlob is undefined。</p><a id="more"></a><p>原因：<br>blog方法兼容性不是很好，所以需要兼容一下<br>解决办法：<br>发现了这个网址解决了问题<br><a href="https://github.com/blueimp/JavaScript-Canvas-to-Blob" target="_blank" rel="noopener">https://github.com/blueimp/JavaScript-Canvas-to-Blob</a>;<br>使用方法很简单，只需要把canvas-to-blob.js或者canvas-to-blob.min.js在之前引入就好了。然后下面原来的方法该怎么用就怎么用，就没有问题了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var canvas = document.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">if</span> (canvas.toBlob) &#123;</span><br><span class="line">    canvas.toBlob(<span class="keyword">function</span> (blob) &#123;</span><br><span class="line">             //<span class="keyword">do</span> something</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">'image/jpeg'</span></span><br><span class="line">     );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇文章，图片在谷歌浏览器上使用的时候没有问题，但是在手机上测试的时候就卡在那不动了，然后我测试了安卓我们的app和手机自带浏览器都不行，又测试了苹果我们的app不行，微信和safari是可以的。&lt;/p&gt;
&lt;p&gt;然后我就和我们的安卓小哥说让他帮我看看log,结果发现canvas.toBlob is undefined。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="blob" scheme="http://zhouyanwei.cn/tags/blob/"/>
    
  </entry>
  
  <entry>
    <title>单图片上传pro(带压缩版)</title>
    <link href="http://zhouyanwei.cn/2018/12/11/imguploadpro/"/>
    <id>http://zhouyanwei.cn/2018/12/11/imguploadpro/</id>
    <published>2018-12-10T16:00:00.000Z</published>
    <updated>2018-12-11T07:47:24.478Z</updated>
    
    <content type="html"><![CDATA[<p>单图片做完之后发现手机拍照照片都很大，基本都在4、5M，上传速度有些慢，然后就寻找方法，开始想使用图片转base64给后台，但是发现后台不支持base64,然后寻求他路，发现给以把图片转换成canvas进行压缩。</p><a id="more"></a><p>代码如下（还是需要依赖jq）</p><p>html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"imgUpload"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"file"</span> accept=<span class="string">"image/*"</span> capture=<span class="string">"camera"</span> class=<span class="string">"imgUploadIpt"</span>&gt;</span><br><span class="line">    &lt;img src=<span class="string">"1.png"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">css</span><br><span class="line">``` bash</span><br><span class="line">.imgUpload &#123;</span><br><span class="line">    width: 88px;</span><br><span class="line">    height: 88px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.imgUpload input[<span class="built_in">type</span>=<span class="string">'file'</span>] &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: 2;</span><br><span class="line">&#125;</span><br><span class="line">.imgUpload img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ImgUpload(ele, files, options ) &#123;</span><br><span class="line">    this.ele = ele;//点击的input元素</span><br><span class="line">    this.files = files;//图片file</span><br><span class="line">    this.compression = options.compression || <span class="literal">false</span>;//是否开启压缩默认否</span><br><span class="line">    this.maxWidth = options.maxWidth || 800;//压缩最大宽度</span><br><span class="line">    this.maxHeight = options.maxHeight || 800;//压缩最大高度</span><br><span class="line">    this.callback = options.callback;//回调</span><br><span class="line">    this.init();</span><br><span class="line">&#125;</span><br><span class="line">ImgUpload.prototype = &#123;</span><br><span class="line">    init: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        this.onChangeUploadFile();</span><br><span class="line">    &#125;,</span><br><span class="line">    onChangeUploadFile: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        var _this = this;</span><br><span class="line">        //判断文件是否添加进来</span><br><span class="line">        <span class="keyword">if</span> (this.files.length == 0) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        var file = this.files[0];</span><br><span class="line">        //判断上传的是不是图片</span><br><span class="line">        <span class="keyword">if</span> (file.type.indexOf(<span class="string">'image'</span>) === -1) &#123;</span><br><span class="line">            alert(<span class="string">"您上传的不是图片！"</span>);</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        //上传图片进行最大限制</span><br><span class="line">        var filesize = Math.floor((file.size) / 1024);</span><br><span class="line">        <span class="keyword">if</span> (filesize &gt; 1024 * 20) &#123;</span><br><span class="line">            alert(<span class="string">"上传大小不能超过20M."</span>);</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        this.ele.parent().find(<span class="string">"img"</span>).attr(<span class="string">"src"</span>, window.URL.createObjectURL(file));</span><br><span class="line">        <span class="keyword">if</span>( !this.compression ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.callback) &#123;</span><br><span class="line">                this.callback( file );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            // 压缩图片需要的一些元素和对象</span><br><span class="line">            var reader = new FileReader(), img = new Image();</span><br><span class="line">            //result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容</span><br><span class="line">            reader.readAsDataURL(file);</span><br><span class="line">            // 文件base64化，以便获知图片原始尺寸</span><br><span class="line">            reader.onload = <span class="keyword">function</span>(e) &#123;</span><br><span class="line">                img.src = e.target.result;</span><br><span class="line">            &#125;;</span><br><span class="line">            // 缩放图片需要的canvas</span><br><span class="line">            var canvas = document.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">            var context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">            img.onload = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">                // 图片原始尺寸</span><br><span class="line">                var originWidth = this.width;</span><br><span class="line">                var originHeight = this.height;</span><br><span class="line">                // 最大尺寸限制</span><br><span class="line">                var maxWidth = _this.maxWidth, maxHeight = _this.maxHeight;</span><br><span class="line">                // 目标尺寸</span><br><span class="line">                var targetWidth = originWidth, targetHeight = originHeight;</span><br><span class="line">                // 图片尺寸超过限制</span><br><span class="line">                <span class="keyword">if</span> (originWidth &gt; maxWidth || originHeight &gt; maxHeight) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (originWidth / originHeight &gt; maxWidth / maxHeight) &#123;</span><br><span class="line">                        // 更宽，按照宽度限定尺寸</span><br><span class="line">                        targetWidth = maxWidth;</span><br><span class="line">                        targetHeight = Math.round(maxWidth * (originHeight / originWidth));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        targetHeight = maxHeight;</span><br><span class="line">                        targetWidth = Math.round(maxHeight * (originWidth / originHeight));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                // canvas对图片进行缩放</span><br><span class="line">                canvas.width = targetWidth;</span><br><span class="line">                canvas.height = targetHeight;</span><br><span class="line">                // 清除画布</span><br><span class="line">                context.clearRect(0, 0, targetWidth, targetHeight);</span><br><span class="line">                // 图片压缩</span><br><span class="line">                context.drawImage(img, 0, 0, targetWidth, targetHeight);</span><br><span class="line">                // canvas转为blob返回</span><br><span class="line">                canvas.toBlob(<span class="keyword">function</span> (blob) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_this.callback) &#123;</span><br><span class="line">                        _this.callback( blob );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, file.type || <span class="string">'image/png'</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.imgUploadIpt'</span>).on(<span class="string">'change'</span>, <span class="keyword">function</span> (event) &#123;</span><br><span class="line">    new ImgUpload($(this), event.target.files, &#123;</span><br><span class="line">        compression: <span class="literal">true</span>, //开启压缩默认不压缩</span><br><span class="line">        maxWidth: 600, //开启压缩图片最大宽度</span><br><span class="line">        maxHeight: 600, //开启压缩图片最大高度</span><br><span class="line">        callback:<span class="keyword">function</span> (file) &#123;//回调函数</span><br><span class="line">            console.log(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><a href="../../../../link/2018-12-11/index.html">具体效果点击这里</a>;</p><p>参考地址<br><a href="https://www.zhangxinxu.com/wordpress/2017/07/html5-canvas-image-compress-upload/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2017/07/html5-canvas-image-compress-upload/</a>;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单图片做完之后发现手机拍照照片都很大，基本都在4、5M，上传速度有些慢，然后就寻找方法，开始想使用图片转base64给后台，但是发现后台不支持base64,然后寻求他路，发现给以把图片转换成canvas进行压缩。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="imgUploadPro" scheme="http://zhouyanwei.cn/tags/imgUploadPro/"/>
    
  </entry>
  
  <entry>
    <title>IntersectionObserver API</title>
    <link href="http://zhouyanwei.cn/2018/12/03/IntersectionObserver/"/>
    <id>http://zhouyanwei.cn/2018/12/03/IntersectionObserver/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2018-12-03T06:52:34.900Z</updated>
    
    <content type="html"><![CDATA[<p>原来判断一个元素是否在页面显示区域中，需要使用scroll事件进行监听判断，现在有了IntersectionObserver就方便了很多。</p><a id="more"></a><p>用法为</p><p>var io = new IntersectionObserver(callback, option);</p><p>IntersectionObserver是浏览器原生提供的构造函数，接受两个参数：callback是可见性变化时的回调函数，option是配置对象（该参数可选）。</p><p>// 开始观察</p><pre><code class="bash">io.observe(document.getElementById(<span class="string">'example'</span>));</code></pre><p>// 停止观察</p><pre><code class="bash">io.unobserve(element);</code></pre><p>// 关闭观察器</p><pre><code class="bash">io.disconnect();</code></pre><pre><code class="bash">var io = new IntersectionObserver(    entries =&gt; {        entries.forEach(i =&gt; {            console.log(<span class="string">'Time: '</span> + i.time);            console.log(<span class="string">'Target: '</span> + i.target);            console.log(<span class="string">'IntersectionRatio: '</span> + i.intersectionRatio);            console.log(<span class="string">'rootBounds: '</span> + i.rootBounds);            console.log(i.boundingClientRect);            console.log(i.intersectionRect);            console.log(<span class="string">'================'</span>);        });    },    {        /* Using default options. Details below */    });// Start observing an element// 多次调用io.observe(document.querySelector(<span class="string">'#a'</span>));io.observe(document.querySelector(<span class="string">'#b'</span>));</code></pre><p>返回的属性如下</p><pre><code class="bash">time：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒target：被观察的目标元素，是一个 DOM 节点对象rootBounds：根元素的矩形区域的信息，getBoundingClientRect()方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回nullboundingClientRect：目标元素的矩形区域的信息intersectionRect：目标元素与视口（或根元素）的交叉区域的信息intersectionRatio：目标元素的可见比例，即intersectionRect占boundingClientRect的比例，完全可见时为1，完全不可见时小于等于0</code></pre><p>这里面返回的值里面有位置信息，就可以搞事情了。</p><p>看一下兼容性</p><p><img src="/images/2018-12-03/1.png" alt=""></p><p>虽然兼容还不是很好，要是这个方法主流兼容了就很好了。以后一定是一个好方法。</p><p>想要学习更多的请借一步前往阮大大这里看</p><p><a href="http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原来判断一个元素是否在页面显示区域中，需要使用scroll事件进行监听判断，现在有了IntersectionObserver就方便了很多。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="IntersectionObserver" scheme="http://zhouyanwei.cn/tags/IntersectionObserver/"/>
    
  </entry>
  
  <entry>
    <title>flutter Android Studio配置错误</title>
    <link href="http://zhouyanwei.cn/2018/11/30/flutter/"/>
    <id>http://zhouyanwei.cn/2018/11/30/flutter/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2018-12-03T05:43:42.705Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始学些flutter，安装配置的时候遇到了点小问题，配置流程我就不发了，网上很多，我的学习地址是这个，可以参考。<a href="http://jspang.com/post/flutter1.html#toc-12d" target="_blank" rel="noopener">技术胖的这篇教程</a>;<br>我只要是记录我在使用Android Studio运行flutter的时候出现的问题。</p><a id="more"></a><p>出现问题如下图</p><p><img src="/images/2018-11-30/1.png" alt=""></p><p>我是没搞懂这是什么问题，然后就请教了一下我们公司做Android的大神，他来我这一看，就找到了问题。</p><p><img src="/images/2018-11-30/2.png" alt=""><br><img src="/images/2018-11-30/3.png" alt=""></p><p>看着两个图，文件配置的版本号为27，虚拟机的版本号为28 两个版本号没有对上，然后我把27改成28，在debug一下就跑起来了。</p><p>闻道有先后，术业有专攻。</p><p>还是要多多学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始学些flutter，安装配置的时候遇到了点小问题，配置流程我就不发了，网上很多，我的学习地址是这个，可以参考。&lt;a href=&quot;http://jspang.com/post/flutter1.html#toc-12d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;技术胖的这篇教程&lt;/a&gt;;&lt;br&gt;我只要是记录我在使用Android Studio运行flutter的时候出现的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="flutter" scheme="http://zhouyanwei.cn/categories/flutter/"/>
    
    
      <category term="flutter" scheme="http://zhouyanwei.cn/tags/flutter/"/>
    
      <category term="Android Studio" scheme="http://zhouyanwei.cn/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>单图片上传</title>
    <link href="http://zhouyanwei.cn/2018/11/28/imgupload/"/>
    <id>http://zhouyanwei.cn/2018/11/28/imgupload/</id>
    <published>2018-11-27T16:00:00.000Z</published>
    <updated>2018-11-28T02:49:33.073Z</updated>
    
    <content type="html"><![CDATA[<p>业务需求，移动端app需要一个单图片上传的功能，并且只允许照相，不允许从本地选取，本来想使用webUploader来做，配置好了，发现一个问题只能上传一次，在次上传，缩略图不替换（也有可能这个插件我没配置使用好，此处不做过多纠结），然后就参考写了一个。</p><a id="more"></a><p>代码如下（需要依赖jq）</p><p>html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"imgUpload"</span>&gt;</span><br><span class="line">    &lt;img src=<span class="string">"upload.png"</span> alt=<span class="string">""</span>&gt;&lt;!--upload.png为初始显示背景图--&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>css<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#imgUpload &#123;</span></span><br><span class="line">    width: 88px;</span><br><span class="line">    height: 88px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#imgUpload img &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//图片上传</span><br><span class="line"><span class="keyword">function</span> ImgUpload(id, options) &#123;</span><br><span class="line">    this.me = $(id);</span><br><span class="line">    this.callback = options.callback;</span><br><span class="line">    this.init();</span><br><span class="line">&#125;</span><br><span class="line">ImgUpload.prototype = &#123;</span><br><span class="line">    init: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        this.eventClickInit();</span><br><span class="line">    &#125;,</span><br><span class="line">    eventClickInit:<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        this.me.unbind().click(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            self.createImageUploadDialog();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    onChangeUploadFile: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        var fileInput = this.fileInput;</span><br><span class="line">        var files = fileInput.files;</span><br><span class="line">        <span class="keyword">if</span> (files.length == 0) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        var file = files[0];</span><br><span class="line">        <span class="keyword">if</span> (file.type.indexOf(<span class="string">'image'</span>) === -1) &#123;</span><br><span class="line">            alert(<span class="string">"您上传的不是图片！"</span>);</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        var img = window.URL.createObjectURL(file);</span><br><span class="line">        var filename = file.name;</span><br><span class="line">        var filesize = Math.floor((file.size) / 1024);</span><br><span class="line">        <span class="keyword">if</span> (filesize &gt; 1024 * 20) &#123;</span><br><span class="line">            alert(<span class="string">"上传大小不能超过20M."</span>);</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        this.me.find(<span class="string">"img"</span>).attr(<span class="string">"src"</span>, img);</span><br><span class="line">        this.me.find(<span class="string">"img"</span>).attr(<span class="string">"title"</span>, filename);</span><br><span class="line">        <span class="keyword">if</span> (this.callback) &#123;</span><br><span class="line">            this.callback(files);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    createImageUploadDialog: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        var fileInput = this.fileInput;</span><br><span class="line">        <span class="keyword">if</span> (!fileInput) &#123;</span><br><span class="line">            fileInput = document.createElement(<span class="string">'input'</span>);</span><br><span class="line">            fileInput.type = <span class="string">'file'</span>;</span><br><span class="line">            fileInput.name = <span class="string">'ime-images'</span>;</span><br><span class="line">            fileInput.accept = <span class="string">'image/*'</span>;</span><br><span class="line">            fileInput.capture = <span class="string">'camera'</span>;//只允许照相</span><br><span class="line">            fileInput.multiple = <span class="literal">false</span>;//不允许多选</span><br><span class="line">            fileInput.onchange = this.onChangeUploadFile.bind(this);</span><br><span class="line">            this.fileInput = fileInput;</span><br><span class="line">        &#125;</span><br><span class="line">        fileInput.click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用方法</span><br><span class="line">var dragImgUpload = new ImgUpload(<span class="string">"#imgUpload"</span>,&#123;</span><br><span class="line">    callback:<span class="keyword">function</span> (files) &#123;</span><br><span class="line">        var imgFile = files[0];</span><br><span class="line">        console.log(imgFile);</span><br><span class="line">        //<span class="keyword">do</span> something 调取接口进行上传等操作。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><a href="../../../../link/2018-11-28/index.html">具体效果点击这里</a>;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;业务需求，移动端app需要一个单图片上传的功能，并且只允许照相，不允许从本地选取，本来想使用webUploader来做，配置好了，发现一个问题只能上传一次，在次上传，缩略图不替换（也有可能这个插件我没配置使用好，此处不做过多纠结），然后就参考写了一个。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="imgUpload" scheme="http://zhouyanwei.cn/tags/imgUpload/"/>
    
  </entry>
  
  <entry>
    <title>radio、checkbox 自定义样式</title>
    <link href="http://zhouyanwei.cn/2018/11/16/radioCheckbox/"/>
    <id>http://zhouyanwei.cn/2018/11/16/radioCheckbox/</id>
    <published>2018-11-15T16:00:00.000Z</published>
    <updated>2018-11-16T03:14:32.611Z</updated>
    
    <content type="html"><![CDATA[<p>默认的radio、checkbox的样式比较单一，往往达不到我们想要的效果，所以需要自定义我们需要的样子。</p><a id="more"></a><p>先来看一下最终效果图吧。<br><img src="/images/2018-11-16/1.gif" alt=""></p><p>基础布局如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"radioBox"</span>&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input class=<span class="string">"radioInput"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"single"</span> value=<span class="string">"5"</span>&gt;</span><br><span class="line">        &lt;span class=<span class="string">"radioSpan"</span>&gt;&lt;/span&gt;5</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input class=<span class="string">"radioInput"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"single"</span> value=<span class="string">"4"</span>&gt;</span><br><span class="line">        &lt;span class=<span class="string">"radioSpan"</span>&gt;&lt;/span&gt;4</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input class=<span class="string">"radioInput"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"single"</span> value=<span class="string">"3"</span>&gt;</span><br><span class="line">        &lt;span class=<span class="string">"radioSpan"</span>&gt;&lt;/span&gt;3</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input class=<span class="string">"radioInput"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"single"</span> value=<span class="string">"2"</span>&gt;</span><br><span class="line">        &lt;span class=<span class="string">"radioSpan"</span>&gt;&lt;/span&gt;2</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input class=<span class="string">"radioInput"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"single"</span> value=<span class="string">"1"</span>&gt;</span><br><span class="line">        &lt;span class=<span class="string">"radioSpan"</span>&gt;&lt;/span&gt;1</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"checkBox"</span>&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input class=<span class="string">"checkInput"</span> <span class="built_in">type</span>=<span class="string">"checkbox"</span>&gt;</span><br><span class="line">        &lt;span class=<span class="string">"checkSpan"</span>&gt;&lt;/span&gt;喜欢</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input class=<span class="string">"checkInput"</span> <span class="built_in">type</span>=<span class="string">"checkbox"</span>&gt;</span><br><span class="line">        &lt;span class=<span class="string">"checkSpan"</span>&gt;&lt;/span&gt;好看</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input class=<span class="string">"checkInput"</span> <span class="built_in">type</span>=<span class="string">"checkbox"</span>&gt;</span><br><span class="line">        &lt;span class=<span class="string">"checkSpan"</span>&gt;&lt;/span&gt;耐用</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>样式是这样的<br><img src="/images/2018-11-16/2.png" alt=""></p><p>然后我们把我们想要的样式赋予我们添加的span标签,添加css样式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">.radioSpan &#123;</span><br><span class="line">    background-color:transparent;</span><br><span class="line">    border: 1px solid <span class="comment">#B5B5B5;</span></span><br><span class="line">    border-radius:100%;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    width:13px;</span><br><span class="line">    height:13px;</span><br><span class="line">    vertical-align:middle;</span><br><span class="line">    line-height:0;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.radioInput:checked + .radioSpan &#123;</span><br><span class="line">    border: 1px solid <span class="comment">#16A096;</span></span><br><span class="line">&#125;</span><br><span class="line">.radioInput:checked + .radioSpan:after &#123;</span><br><span class="line">    background-color:<span class="comment">#16A096;</span></span><br><span class="line">    border-radius:100%;</span><br><span class="line">    content:<span class="string">""</span>;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    height:9px;</span><br><span class="line">    margin:2px;</span><br><span class="line">    width:9px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.checkSpan &#123;</span><br><span class="line">    background-color:transparent;</span><br><span class="line">    border: 1px solid <span class="comment">#B5B5B5;</span></span><br><span class="line">    display:inline-block;</span><br><span class="line">    width:13px;</span><br><span class="line">    height:13px;</span><br><span class="line">    vertical-align:middle;</span><br><span class="line">    line-height:0;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.checkInput:checked + .checkSpan &#123;</span><br><span class="line">    width: 15px;</span><br><span class="line">    height: 15px;</span><br><span class="line">    background: url(<span class="string">'checkedSelect.png'</span>) no-repeat center center;</span><br><span class="line">    background-size: 15px 15px;</span><br><span class="line">    border: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在看一下样式<br><img src="/images/2018-11-16/3.png" alt=""><br><img src="/images/2018-11-16/4.gif" alt=""></p><p>然后我们在把原来的input标签隐藏就好了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.radioInput &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line">.checkInput &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就可以看到开始的效果了。</p><p>这里样式全部是分开写的，方便理解。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认的radio、checkbox的样式比较单一，往往达不到我们想要的效果，所以需要自定义我们需要的样子。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://zhouyanwei.cn/categories/css/"/>
    
    
      <category term="radio" scheme="http://zhouyanwei.cn/tags/radio/"/>
    
      <category term="checkbox" scheme="http://zhouyanwei.cn/tags/checkbox/"/>
    
  </entry>
  
  <entry>
    <title>var() and mask</title>
    <link href="http://zhouyanwei.cn/2018/10/19/cssstudy/"/>
    <id>http://zhouyanwei.cn/2018/10/19/cssstudy/</id>
    <published>2018-10-18T16:00:00.000Z</published>
    <updated>2018-10-19T08:54:36.639Z</updated>
    
    <content type="html"><![CDATA[<p>空闲时间看到俩CSS，var()、mask 没遇到过，比较好奇，学习一下。</p><a id="more"></a><h1 id="CSS变量var-语法"><a href="#CSS变量var-语法" class="headerlink" title="CSS变量var()语法"></a>CSS变量var()语法</h1><p>上来先看看是怎么写的，我就是被这惊奇的写法吸引到了。</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="EdLmJj" data-default-tab="css,result" data-user="zywkuo" data-pen-title="var()" class="codepen">See the Pen <a href="https://codepen.io/zywkuo/pen/EdLmJj/" target="_blank" rel="noopener">var()</a> by 周艳伟 (<a href="https://codepen.io/zywkuo" target="_blank" rel="noopener">@zywkuo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>var 哇 css怎么用到了var，什么鬼。</p><p>原来这是css原生的变量，CSS中原生的变量定义语法是：–<em>，变量使用语法是：var(–</em>)，其中*表示我们的变量名称。关于命名这个东西，各种语言都有些显示，例如CSS选择器不能是数字开头，JS中的变量是不能直接数值的，但是，在CSS变量中，这些限制通通没有</p><p>但是，不能包含$，[，^，(，%等字符，普通字符局限在只要是“数字[0-9]”“字母[a-zA-Z]”“下划线_”和“短横线-”这些组合，但是可以是中文，日文或者韩文。</p><p>看一下兼容性 <img src="/images/2018-10-19/1.png" alt=""></p><p>我们广大的猿友们，努努力吧IE干掉吧。</p><p>有想了解更多的，请来张鑫旭，张大大空间，看看他的这篇文章<a href="https://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/</a></p><p> <code>声明一下，上面和下面一点关系都没有，只是同时看到了，就一起学习一下。</code></p><h1 id="mask"><a href="#mask" class="headerlink" title="mask"></a>mask</h1><p>遮罩mask的功能就是使用透明的图片或渐变遮罩元素的背景.<br>我用我的大白话理解一下，就是把图片的透明处变为不透明，不透明的地方变成透明。（如有错误，欢迎指正。）所以jpg的还是就算了吧，放了也是全透明，没什么效果，开始我放了jpg的，找了半天原因。</p><p>遮罩mask是一个复合属性</p><ul><li>mask-image</li><li>mask-mode</li><li>mask-repeat</li><li>mask-position</li><li>mask-clip</li><li>mask-origin</li><li>mask-size</li><li>mask-type</li><li>mask-composite</li></ul><h2 id="mask-image"><a href="#mask-image" class="headerlink" title="mask-image"></a>mask-image</h2><p>默认值为none，值为透明图片，或透明渐变<br>mask-image遮罩所支持的图片类型非常的广泛，可以是url()静态图片资源，格式包括JPG，PNG以及SVG等都是支持的；也可以是动态生成的图片，例如使用各种CSS3渐变绘制的图片。语法上支持CSS3各类渐变，以及url()功能符，image()功能符，甚至element()功能符。同时还支持多背景，因此理论上，使用mask-image我们可以遮罩出任意我们想要的图形，非常强大。</p><p>html</p><pre><code class="bash">&lt;img src=<span class="string">"1.jpg"</span> alt=<span class="string">""</span> class=<span class="string">"mask"</span>&gt;</code></pre><p>1.jpg图片是这个<br><img src="/images/2018-10-19/2.png" alt=""></p><p>放上这段css</p><pre><code class="bash">.mask {    width: 600px;    -webkit-mask-image: url(3.svg);    mask-image: url(3.svg);}</code></pre><p>3.svg长这样<br><img src="/images/2018-10-19/3.png" alt=""></p><p>运行结果这样<br><img src="/images/2018-10-19/4.png" alt=""></p><h2 id="mask-repeat"><a href="#mask-repeat" class="headerlink" title="mask-repeat"></a>mask-repeat</h2><p>mask-repeat属性的默认值是repeat，行为类似于background-repeat属性。</p><p>属性</p><pre><code class="bash">mask-repeat: repeat-x;      //水平x平铺mask-repeat: repeat-y;      //垂直y平铺。mask-repeat: repeat;        //默认值，水平和垂直平铺。mask-repeat: no-repeat;     //不平铺mask-repeat: space;         //表示遮罩图片尽可能的平铺同时不发生任何剪裁。mask-repeat: round;         //表示遮罩图片尽可能靠在一起没有任何间隙，同时不发生任何剪裁。</code></pre><p><img src="/images/2018-10-19/5.png" alt=""></p><h2 id="mask-position"><a href="#mask-position" class="headerlink" title="mask-position"></a>mask-position</h2><p>mask-position和background-position支持的属性值和表现基本上都是一模一样的。<br>例如,mask-position默认计算值是0% 0%，也就是相对左上角定位。</p><p>支持单个关键字（缺省关键字的解析为center）：</p><pre><code class="bash">mask-position: top;mask-position: bottom;mask-position: left;mask-position: right;mask-position: center;</code></pre><p>支持垂直和水平方向两个关键字：</p><pre><code class="bash">mask-position: right top;</code></pre><p>支持各类数值：</p><pre><code class="bash">mask-position: 30% 50%;&lt;mask-position: 10px 5rem;</code></pre><p>由于mask-image支持多遮罩图片，因此，mask-position也支持多属性值，例如：</p><pre><code class="bash">mask-position: 0 0, center;</code></pre><p>这个我就不具体上图片了，想必大家都懂了。<br>想看的请跳到张大大这里看一下吧，<a href="https://www.zhangxinxu.com/study/201711/mask-position-png.html" target="_blank" rel="noopener">https://www.zhangxinxu.com/study/201711/mask-position-png.html</a></p><h2 id="mask-clip"><a href="#mask-clip" class="headerlink" title="mask-clip"></a>mask-clip</h2><p>mask-clip属性性质上和background-clip类似，但是mask-clip支持的属性值要多一点，主要是多了个SVG元素的mask-clip支持。</p><p>属性值</p><pre><code class="bash">mask-clip: content-box;mask-clip: padding-box;mask-clip: border-box;mask-clip: fill-box;mask-clip: stroke-box;mask-clip: view-box;mask-clip: no-clip;</code></pre><p>其中默认值是border-box和background-clip类似。同样也支持多属性值：</p><pre><code class="bash">mask-clip: content-box, border-box;</code></pre><p>谷歌测试了一下，全员out！！！！！！晕<br>火狐也全员out，什么鬼，难道和笔记本有关（我的是mac）..这个还有待测试。</p><h2 id="mask-origin"><a href="#mask-origin" class="headerlink" title="mask-origin"></a>mask-origin</h2><p>属性值</p><pre><code class="bash">mask-origin: content-box;mask-origin: padding-box;mask-origin: border-box;mask-origin: fill-box;mask-origin: stroke-box;mask-origin: view-box;</code></pre><p>其中默认值是border-box和background-origin类似。同样也支持多属性值：</p><pre><code class="bash">mask-origin: content-box, border-box;</code></pre><p>测试结果依旧全员out!!!!!!</p><h2 id="mask-size"><a href="#mask-size" class="headerlink" title="mask-size"></a>mask-size</h2><p>mask-size属性性质上和background-size类似，支持的属性值也类似，作用是控制遮罩图片尺寸。</p><p>默认值是auto.</p><p>属性值</p><pre><code class="bash">mask-size: cover;mask-size: contain;</code></pre><p>支持各类数值（缺省高度会自动计算为auto）：</p><pre><code class="bash">mask-size: 50%;mask-size: 3em;mask-size: 12px;mask-size: 50% auto;mask-size: 3em 25%;mask-size: auto 6px;</code></pre><p>同样支持多属性值：</p><pre><code class="bash">mask-size: 50%, 25%, 25%;mask-size: 6px, auto, contain;</code></pre><p><img src="/images/2018-10-19/6.png" alt=""></p><h2 id="mask-type"><a href="#mask-type" class="headerlink" title="mask-type"></a>mask-type</h2><p>mask-type属性功能上和mask-mode类似，都是设置不同的遮罩模式。但还是有个很大的区别，那就是mask-type只能作用在SVG元素上，本质上是由SVG属性演变而来，因此，Chrome等浏览器都是支持的。但是mask-mode是一个针对所有元素的CSS3属性，Chrome等浏览器并不支持，目前仅Firefox浏览器支持。</p><p>由于只能作用在SVG元素上，因此默认值表现为SVG元素默认遮罩模式，也就是默认值是luminance，亮度遮罩模式。如果需要支持透明度遮罩模式，可以这么设置：</p><pre><code class="bash">mask-type: alpha;</code></pre><h2 id="mask-composite"><a href="#mask-composite" class="headerlink" title="mask-composite"></a>mask-composite</h2><p>mask-composite表示当同时使用多个图片进行遮罩时候的混合方式</p><p>属性值</p><pre><code class="bash">mask-composite: add;            //遮罩累加。mask-composite: subtract;       //遮罩相减。也就是遮罩图片重合的地方不显示。意味着遮罩图片越多，遮罩区域越小。mask-composite: intersect;      //遮罩相交。也就是遮罩图片重合的地方才显示遮罩。mask-composite: exclude;        //遮罩排除。也就是后面遮罩图片重合的地方排除，当作透明处理。</code></pre><p>这个属性浏览器支持也不是很好。。。</p><h2 id="mask-mode"><a href="#mask-mode" class="headerlink" title="mask-mode"></a>mask-mode</h2><p>默认值为match-source，意思是根据资源的类型自动采用合适的遮罩模式。</p><p>mask-mode支持下面3个属性值：</p><pre><code class="bash">.mask {    mask-mode: alpha;    mask-mode: luminance;    mask-mode: match-source;}</code></pre><p>因为mask-image支持多图片，因此mask-mode也支持多属性值，例如：</p><p>mask-mode: alpha, match-source;</p><p>这个属性浏览器支持效果还不是很好。</p><p>看一下浏览器兼容性吧。</p><p><img src="/images/2018-10-19/7.png" alt=""></p><p>虽然支持还不是很好，但是好东西不怕晚，欢迎指正。</p><p>学习的是张鑫旭，张大大的这篇文章<a href="https://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;空闲时间看到俩CSS，var()、mask 没遇到过，比较好奇，学习一下。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://zhouyanwei.cn/categories/css/"/>
    
    
      <category term="var" scheme="http://zhouyanwei.cn/tags/var/"/>
    
      <category term="mask" scheme="http://zhouyanwei.cn/tags/mask/"/>
    
  </entry>
  
  <entry>
    <title>CSS 网格布局(Grid Layout)</title>
    <link href="http://zhouyanwei.cn/2018/10/17/grid/"/>
    <id>http://zhouyanwei.cn/2018/10/17/grid/</id>
    <published>2018-10-16T16:00:00.000Z</published>
    <updated>2018-10-17T07:35:53.637Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 网格布局(Grid Layout) 是CSS中最强大的布局系统。 这是一个二维系统，这意味着它可以同时处理列和行，不像 flexbox 那样主要是一维系统。 你可以通过将CSS规则应用于父元素（成为网格容器）和该元素的子元素（网格元素），来使用网格布局。</p><a id="more"></a><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>CSS网格布局（又名“网格”）是一个二维的基于网格的布局系统，其目的只在于完全改变我们设计基于网格的用户界面的方式。 CSS一直用来布局网页，但一直都不完美。 一开始我们使用table 做布局，然后转向浮动、定位以及inline-block，但所有这些方法本质上都是 Hack 的方式，并且遗漏了很多重要的功能（例如垂直居中）。 Flexbox的出现在一定程度上解决了这个问题，但是它的目的是为了更简单的一维布局，而不是复杂的二维布局（Flexbox和Grid实际上一起工作得很好）。 只要我们一直在制作网站，我们就一直在为解决布局问题不断探索，<br>而Grid是第一个专门为解决布局问题而生的CSS模块。</p><p>有两个东西，启发我写这篇指南。 第一个是雷切尔·安德鲁（Rachel Andrew）的书为CSS Grid布局准备。 这本书对网格布局做了彻底、清晰的介绍，也是是整篇文章的基础，我强烈建议你购买并阅读他的书。 我的另一个重要灵感是Chris Coyier的Flexbox完全指南，当需要查阅 flexbox 的一切资料时我就会找这篇文章。 这篇文章帮助了很多人学习 Flex 布局，也是 Google 上搜索“flexbox”关键字排名第一的文章。你会发现他的文章和我的很多相似之处，有最好的范例在那放着为什么咱不偷师学着写呢？</p><p>本指南的目的是介绍网格概念，因为它们存在于最新版本的规范中。 因此我不会覆盖过时的IE语法，而且随着规范的成熟，我会尽最大努力保存更新本指南。</p><h1 id="基础知识以及浏览器支持情况"><a href="#基础知识以及浏览器支持情况" class="headerlink" title="基础知识以及浏览器支持情况"></a>基础知识以及浏览器支持情况</h1><p>一开始你需要使用display：grid把容器元素定义为一个网格，使用grid-template-columns和grid-template-rows设置列和行大小，然后使用grid-column 和 grid-row把它的子元素放入网格。 与flexbox类似，网格子元素的原始顺序不重要。 你的可以在 CSS 里以任意顺序放置它们，这使得使用媒体查询重新排列网格变得非常容易。 想象一下，我们需要定义整个页面的布局，然后为了适应不同的屏幕宽度完全重新排列，我们只需要几行CSS就能实现这个需求。 网格是有史以来最强大的CSS模块之一。</p><p>截至2017年3月，许多浏览器都提供了原生的、不加前缀的对CSS Grid的支持，比如 Chrome（包括Android），Firefox，Safari（包括iOS）和Opera。 另一方面，Internet Explorer 10和11支持它，但需要使用过时的语法。 Edge浏览器已经宣布将支持标准的Grid语法，但暂未支持。</p><p>浏览器支持的详细数据可在<a href="http://caniuse.com/#feat=css-grid" target="_blank" rel="noopener">Caniuse</a>查看。其中里面的数字表示该版本以上的浏览器支持Grid。</p><h2 id="桌面浏览器"><a href="#桌面浏览器" class="headerlink" title="桌面浏览器"></a>桌面浏览器</h2><pre><code class="bash">Chrome        Opera        Firefox        IE        Edge    Safari57            44            52            11*        16        10.1</code></pre><h2 id="移动端-平板"><a href="#移动端-平板" class="headerlink" title="移动端 / 平板"></a>移动端 / 平板</h2><pre><code class="bash">iOS Safari        Opera Mobile    Opera Mini    Android        Android Chrome        Android Firefox10.3            No                No            62            62                    57</code></pre><p>除了微软之外，浏览器制造商在 Grid 规范完全落地以前似乎并没有放手让 Gird 野生也长的打算。 这是一件好事，这意味着我们不需要再去学习各种浏览器兼容版本的旧语法。</p><p>在生产环境中使用Grid只是时间问题，但现在是我们该学习的时候了。</p><h1 id="重要术语"><a href="#重要术语" class="headerlink" title="重要术语"></a>重要术语</h1><p>在深入了解网格的概念之前，理解术语是很重要的。 由于这里所涉及的术语在概念上都是相似的，如果不先记住它们在网格规范中定义的含义，则很容易将它们彼此混淆。 但是不用太担心，这些术语并不多。</p><h2 id="Grid-Container"><a href="#Grid-Container" class="headerlink" title="Grid Container"></a>Grid Container</h2><p>设置了 display: gird 的元素。 这是所有 grid item 的直接父项。 在下面的例子中，.container 就是是 grid container。</p><pre><code class="bash">&lt;div class=<span class="string">"container"</span>&gt;  &lt;div class=<span class="string">"item item-1"</span>&gt;&lt;/div&gt;  &lt;div class=<span class="string">"item item-2"</span>&gt;&lt;/div&gt;  &lt;div class=<span class="string">"item item-3"</span>&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><h2 id="Grid-Item"><a href="#Grid-Item" class="headerlink" title="Grid Item"></a>Grid Item</h2><p>Grid 容器的孩子（直接子元素）。下面的 .item 元素就是 grid item，但 .sub-item不是。</p><pre><code class="bash">&lt;div class=<span class="string">"container"</span>&gt;  &lt;div class=<span class="string">"item"</span>&gt;&lt;/div&gt;   &lt;div class=<span class="string">"item"</span>&gt;    &lt;p class=<span class="string">"sub-item"</span>&gt;&lt;/p&gt;  &lt;/div&gt;  &lt;div class=<span class="string">"item"</span>&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><h2 id="Grid-Line"><a href="#Grid-Line" class="headerlink" title="Grid Line"></a>Grid Line</h2><p>这个分界线组成网格结构。 它们既可以是垂直的（“column grid lines”），也可以是水平的（“row grid lines”），并位于行或列的任一侧。 下面例中的黄线就是一个列网格线。<br><img src="/images/2018-10-17/grid1.jpg" alt=""></p><h2 id="Grid-Track"><a href="#Grid-Track" class="headerlink" title="Grid Track"></a>Grid Track</h2><p>两个相邻网格线之间的空间。 你可以把它们想象成网格的列或行。 下面是第二行和第三行网格线之间的网格轨道。<br><img src="/images/2018-10-17/grid2.jpg" alt=""></p><h2 id="Grid-Cell"><a href="#Grid-Cell" class="headerlink" title="Grid Cell"></a>Grid Cell</h2><p>两个相邻的行和两个相邻的列网格线之间的空间。它是网格的一个“单元”。 下面是行网格线1和2之间以及列网格线2和3的网格单元。<br><img src="/images/2018-10-17/grid3.jpg" alt=""></p><h2 id="Grid-Area"><a href="#Grid-Area" class="headerlink" title="Grid Area"></a>Grid Area</h2><p>四个网格线包围的总空间。 网格区域可以由任意数量的网格单元组成。 下面是行网格线1和3以及列网格线1和3之间的网格区域。<br><img src="/images/2018-10-17/grid4.jpg" alt=""></p><h1 id="Grid-属性列表"><a href="#Grid-属性列表" class="headerlink" title="Grid 属性列表"></a>Grid 属性列表</h1><h2 id="Grid-Container-的全部属性"><a href="#Grid-Container-的全部属性" class="headerlink" title="Grid Container 的全部属性"></a>Grid Container 的全部属性</h2><ul><li>display</li><li>grid-template-columns</li><li>grid-template-rows</li><li>grid-template-areas</li><li>grid-template</li><li>grid-column-gap</li><li>grid-row-gap</li><li>grid-gap</li><li>justify-items</li><li>align-items</li><li>justify-content</li><li>align-content</li><li>grid-auto-columns</li><li>grid-auto-rows</li><li>grid-auto-flow</li><li>grid</li></ul><h2 id="Grid-Items-的全部属性"><a href="#Grid-Items-的全部属性" class="headerlink" title="Grid Items 的全部属性"></a>Grid Items 的全部属性</h2><ul><li>grid-column-start</li><li>grid-column-end</li><li>grid-row-start</li><li>grid-row-end</li><li>grid-column</li><li>grid-row</li><li>grid-area</li><li>justify-self</li><li>align-self</li></ul><h1 id="父容器-Grid-Container-的属性"><a href="#父容器-Grid-Container-的属性" class="headerlink" title="父容器(Grid Container)的属性"></a>父容器(Grid Container)的属性</h1><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>将元素定义为 grid contaienr，并为其内容建立新的网格格式化上下文(grid formatting context)。</p><p>值:<br>grid – 生成一个块级(block-level)网格(主要的还是使用这个属性,想要使用grid,就要先设置这个值)<br>inline-grid – 生成一个行级(inline-level)网格<br>subgrid – 如果你的 grid container 本身就是一个 grid item（即,嵌套网格），你可以使用这个属性来表示你想从它的父节点获取它的行/列的大小，而不是指定它自己的大小。</p><pre><code class="bash">.container {  display: grid | inline-grid | subgrid;}</code></pre><p>注意：column, float, clear, 以及 vertical-align 对一个 grid container 没有影响</p><h2 id="grid-template-columns-grid-template-rows"><a href="#grid-template-columns-grid-template-rows" class="headerlink" title="grid-template-columns / grid-template-rows"></a>grid-template-columns / grid-template-rows</h2><p>使用以空格分隔的多个值来定义网格的列和行。这些值表示轨道大小(track size)，它们之间的空格代表表格线(grid line)。</p><pre><code class="bash">.container {  grid-template-columns: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;  grid-template-rows: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;}</code></pre><p>例子:<br>(如果未显示的给网格线命名)，轨道值之间仅仅有空格时，网格线会被自动分配数字名称：</p><pre><code class="bash">.container {  grid-template-columns: 40px 50px auto 50px 40px;  grid-template-rows: 25% 100px auto;}</code></pre><p><img src="/images/2018-10-17/grid5.jpg" alt=""><br>但你可以给网格线指定确切的命名。 注意中括号里的网格线命名语法：</p><pre><code class="bash">.container {  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];}</code></pre><p><img src="/images/2018-10-17/grid6.jpg" alt=""><br>需要注意的是，一个网格线可以有不止一个名字。例如，这里第2条网格线有两个名字：row1-end 和 row2-start：</p><pre><code class="bash">.container {  grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];}</code></pre><p>如果你的定义中包含重复的部分，则可以使用repeat() 符号来简化写法：</p><pre><code class="bash">.container {  grid-template-columns: repeat(3, 20px [col-start]) 5%;}</code></pre><p>上面的写法和下面等价：</p><pre><code class="bash">.container {  grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start] 5%;}</code></pre><p>“fr”单位允许您将轨道大小设置为网格容器自由空间的一部分。 例如，下面的代码会将每个 grid item 为 grid container 宽度的三分之一：</p><pre><code class="bash">.container {  grid-template-columns: 1fr 1fr 1fr;}</code></pre><p>自由空间是在排除所有不可伸缩的 grid item 之后计算得到的。 在下面的示例中，fr单位可用的自由空间总量不包括50px:</p><pre><code class="bash">.container {  grid-template-columns: 1fr 50px 1fr 1fr;}</code></pre><h2 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h2><p>通过引用 grid-area属性指定的网格区域的名称来定义网格模板。 重复网格区域的名称导致内容扩展到这些单元格。 点号表示一个空单元格。 语法本身提供了网格结构的可视化。</p><p>值：</p><p><grid-area-name> – 使用 grid-area 属性设置的网格区域的名称<br>. – 点号代表一个空网格单元<br>none – 没有定义网格区域<br>举例：</grid-area-name></p><pre><code class="bash">.item<span class="_">-a</span> {  grid-area: header;}.item-b {  grid-area: main;}.item-c {  grid-area: sidebar;}.item<span class="_">-d</span> {  grid-area: footer;}.container {  grid-template-columns: 50px 50px 50px 50px;  grid-template-rows: auto;  grid-template-areas:     <span class="string">"header header header header"</span>    <span class="string">"main main . sidebar"</span>    <span class="string">"footer footer footer footer"</span>;}</code></pre><p>这将创建一个四列宽三行高的网格。 整个第一行将由 header 区域组成。 中间一行将由两个 main 区域、一个空单元格和一个 sidebar 区域组成。 最后一行是footer区域组成。<br><img src="/images/2018-10-17/grid7.jpg" alt=""><br>你的声明中的每一行都需要有相同数量的单元格。</p><p>您可以使用任意数量的相邻的.来声明单个空单元格。 只要这些点号之间没有空格，他们就代表了一个单一的单元格。</p><p>需要注意的是你不是在用这个语法命名网格线，而是在命名区域。 当你使用这种语法时，区域两端的网格线实际上是自动命名的。 比如，如果网格区域的名称是foo，那么区域的起始的行网格线和列网格线名称是 foo-start，并且区域终点的行网格线和列网格线名称是 foo-end。 这意味着某些网格线可能有多个名称，比如上面的例子中最左边的一条网格线有三个名字：header-start，main-start 和 footer-start。</p><h2 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template"></a>grid-template</h2><p>在单个声明中定义 grid-template-rows、grid-template-columns、grid-template-areas 的简写。</p><p>值：</p><p>none – 将三个属性都设置为其初始值<br>subgrid – 把 grid-template-rows 和 grid-template-columns 设置为 subgrid, 并且 grid-template-areas 设置为初始值<br>grid-template-rows / &lt;grid-template-columns – 把 grid-template-columns 和 grid-template-rows 设置为指定值, 与此同时, 设置 grid-template-areas 为 none</p><pre><code class="bash">.container {  grid-template: none | subgrid | &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;;}</code></pre><p>它也可以使用一个更复杂但相当方便的语法来指定这三个值。 一个例子：</p><pre><code class="bash">.container {  grid-template:    [row1-start] <span class="string">"header header header"</span> 25px [row1-end]    [row2-start] <span class="string">"footer footer footer"</span> 25px [row2-end]    / auto 50px auto;}</code></pre><p>以上等价于：</p><pre><code class="bash">.container {  grid-template-rows: [row1-start] 25px [row1-end row2-start] 25px [row2-end];  grid-template-columns: auto 50px auto;  grid-template-areas:     <span class="string">"header header header"</span>     <span class="string">"footer footer footer"</span>;}</code></pre><p>由于 grid-template 不会重置隐式网格属性（grid-auto-columns，grid-auto-rows和grid-auto-flow），而这可能是大多数情况下你想要做的。因此建议使用grid属性来代替grid-template。</p><h2 id="grid-column-gap-grid-row-gap"><a href="#grid-column-gap-grid-row-gap" class="headerlink" title="grid-column-gap / grid-row-gap"></a>grid-column-gap / grid-row-gap</h2><p>指定网格线的大小，你可以把它想象为设置列/行之间的间距的宽度。</p><p>值：</p><p>line-size – 一个长度值</p><pre><code class="bash">.container {  grid-column-gap: &lt;line-size&gt;;  grid-row-gap: &lt;line-size&gt;;}</code></pre><p>举例：</p><pre><code class="bash">.container {  grid-template-columns: 100px 50px 100px;  grid-template-rows: 80px auto 80px;   grid-column-gap: 10px;  grid-row-gap: 15px;}</code></pre><p><img src="/images/2018-10-17/grid8.jpg" alt=""><br>只能在列/行之间创建缝隙，而不是在外部边缘创建。</p><h2 id="grid-gap"><a href="#grid-gap" class="headerlink" title="grid-gap"></a>grid-gap</h2><p>grid-row-gap 和 grid-column-gap 的缩写</p><pre><code class="bash">.container {  grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;}</code></pre><p>Example:</p><pre><code class="bash">.container {  grid-template-columns: 100px 50px 100px;  grid-template-rows: 80px auto 80px;   grid-gap: 10px 15px;}</code></pre><p>如果没有指定 grid-row-gap，则会被设置为与 grid-column-gap 相同的值。</p><h2 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a>justify-items</h2><p>沿着行轴对齐网格内的内容（与之对应的是 align-items, 即沿着列轴对齐），该值适用于容器内的所有的 grid items。</p><p>值：</p><p>start: 内容与网格区域的左端对齐<br>end: 内容与网格区域的右端对齐<br>center: 内容位于网格区域的中间位置<br>stretch: 内容宽度占据整个网格区域空间(这是默认值)</p><pre><code class="bash">.container {  justify-items: start | end | center | stretch;}</code></pre><p>举例：</p><pre><code class="bash">.container {  justify-items: start;}</code></pre><p><img src="/images/2018-10-17/grid9.jpg" alt=""></p><pre><code class="bash">.container{  justify-items: end;}</code></pre><p><img src="/images/2018-10-17/grid10.jpg" alt=""></p><pre><code class="bash">.container {  justify-items: center;}</code></pre><p><img src="/images/2018-10-17/grid11.jpg" alt=""></p><pre><code class="bash">.container {  justify-items: stretch;}</code></pre><p><img src="/images/2018-10-17/grid12.jpg" alt=""><br>也可以通过给单个 grid item 设置justify-self属性来达到上述效果。</p><h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p>沿着列轴对齐grid item 里的内容（与之对应的是使用 justify-items 设置沿着行轴对齐），该值适用于容器内的所有 grid items。</p><p>值：</p><p>start: 内容与网格区域的顶端对齐<br>end: 内容与网格区域的底部对齐<br>center: 内容位于网格区域的垂直中心位置<br>stretch: 内容高度占据整个网格区域空间(这是默认值)</p><pre><code class="bash">.container {  align-items: start | end | center | stretch;}</code></pre><p>举例:</p><pre><code class="bash">.container {  align-items: start;}</code></pre><p><img src="/images/2018-10-17/grid13.jpg" alt=""></p><pre><code class="bash">.container {  align-items: end;}</code></pre><p><img src="/images/2018-10-17/grid14.jpg" alt=""></p><pre><code class="bash">.container {  align-items: center;}</code></pre><p><img src="/images/2018-10-17/grid15.jpg" alt=""></p><pre><code class="bash">.container {  align-items: stretch;}</code></pre><p><img src="/images/2018-10-17/grid16.jpg" alt=""><br>也可以通过给单个 grid item 设置align-self属性来达到上述效果。</p><h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p>有时，网格的总大小可能小于其网格容器的大小。如果你的所有 grid items 都使用像px这样的非弹性单位来设置大小，则可能发生这种情况。此时，你可以设置网格容器内的网格的对齐方式。 此属性沿着行轴对齐网格（与之对应的是 align-content, 沿着列轴对齐）。</p><p>值：</p><p>start – 网格与网格容器的左边对齐<br>end – 网格与网格容器的右边对齐<br>center – 网格与网格容器的中间对齐<br>stretch – 调整g rid item 的大小，让宽度填充整个网格容器<br>space-around – 在 grid item 之间设置均等宽度的空白间隙，其外边缘间隙大小为中间空白间隙宽度的一半<br>space-between – 在 grid item 之间设置均等宽度空白间隙，其外边缘无间隙<br>space-evenly – 在每个 grid item 之间设置均等宽度的空白间隙，包括外边缘</p><pre><code class="bash">.container {  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;  }</code></pre><p>举例：</p><pre><code class="bash">.container {  justify-content: start;}</code></pre><p><img src="/images/2018-10-17/grid17.jpg" alt=""></p><pre><code class="bash">.container {  justify-content: end; }</code></pre><p><img src="/images/2018-10-17/grid18.jpg" alt=""></p><pre><code class="bash">.container {  justify-content: center;  }</code></pre><p><img src="/images/2018-10-17/grid19.jpg" alt=""></p><pre><code class="bash">.container {  justify-content: stretch; }</code></pre><p><img src="/images/2018-10-17/grid20.jpg" alt=""></p><pre><code class="bash">.container {  justify-content: space-around;  }</code></pre><p><img src="/images/2018-10-17/grid21.jpg" alt=""></p><pre><code class="bash">.container {  justify-content: space-between; }</code></pre><p><img src="/images/2018-10-17/grid22.jpg" alt=""></p><pre><code class="bash">.container {  justify-content: space-evenly;  }</code></pre><p><img src="/images/2018-10-17/grid23.jpg" alt=""></p><h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p>有时，网格的总大小可能小于其网格容器的大小。如果你的所有 grid items 都使用像px这样的非弹性单位来设置大小，则可能发生这种情况。此时，你可以设置网格容器内的网格的对齐方式。 此属性沿着列轴对齐网格（与之对应的是 justify-content, 即沿着行轴对齐）。</p><p>值：</p><p>start – 网格与网格容器的顶部对齐<br>end – 网格与网格容器的底部对齐<br>center – 网格与网格容器的中间对齐<br>stretch – 调整 grid item 的大小，让高度填充整个网格容器<br>space-around – 在 grid item 之间设置均等宽度的空白间隙，其外边缘间隙大小为中间空白间隙宽度的一半<br>space-between – 在 grid item 之间设置均等宽度空白间隙，其外边缘无间隙<br>space-evenly – 在每个 grid item 之间设置均等宽度的空白间隙，包括外边缘</p><pre><code class="bash">.container {  align-content: start | end | center | stretch | space-around | space-between | space-evenly;  }</code></pre><p>举例：</p><pre><code class="bash">.container {  align-content: start; }</code></pre><p><img src="/images/2018-10-17/grid24.jpg" alt=""></p><pre><code class="bash">.container {  align-content: end; }</code></pre><p><img src="/images/2018-10-17/grid25.jpg" alt=""></p><pre><code class="bash">.container {  align-content: center;  }</code></pre><p><img src="/images/2018-10-17/grid26.jpg" alt=""></p><pre><code class="bash">.container {  align-content: stretch; }</code></pre><p><img src="/images/2018-10-17/grid27.jpg" alt=""></p><pre><code class="bash">.container {  align-content: space-around;  }</code></pre><p><img src="/images/2018-10-17/grid28.jpg" alt=""></p><pre><code class="bash">.container {  align-content: space-between; }</code></pre><p><img src="/images/2018-10-17/grid29.jpg" alt=""></p><pre><code class="bash">.container {  align-content: space-evenly;  }</code></pre><p><img src="/images/2018-10-17/grid30.jpg" alt=""></p><h2 id="grid-auto-columns-grid-auto-rows"><a href="#grid-auto-columns-grid-auto-rows" class="headerlink" title="grid-auto-columns / grid-auto-rows"></a>grid-auto-columns / grid-auto-rows</h2><p>指定自动生成的网格轨道（又名隐式网格轨道）的大小。 隐式网格轨道在你显式的定位超出指定网格范围的行或列（使用 grid-template-rows/grid-template-columns）时被创建。</p><p>值：</p><p><track-size> – 可以是一个长度值，一个百分比值，或者一个自由空间的一部分（使用 fr 单位）</track-size></p><pre><code class="bash">.container {  grid-auto-columns: &lt;track-size&gt; ...;  grid-auto-rows: &lt;track-size&gt; ...;}</code></pre><p>为了说明如何创建隐式网格轨道，思考如下代码：</p><pre><code class="bash">.container {  grid-template-columns: 60px 60px;  grid-template-rows: 90px 90px}</code></pre><p><img src="/images/2018-10-17/grid31.jpg" alt=""></p><p>这里创建了一个 2×2的网格。</p><p>但是，现在想象一下，使用 grid-column 和 grid-row 来定位你的网格项目，如下所示：</p><pre><code class="bash">.item<span class="_">-a</span> {  grid-column: 1 / 2;  grid-row: 2 / 3;}.item-b {  grid-column: 5 / 6;  grid-row: 2 / 3;}</code></pre><p><img src="/images/2018-10-17/grid32.jpg" alt=""></p><p>这里我们指定 .item-b开始于列网格线 5 并结束于在列网格线 6，但我们并未定义列网格线 5 或 6。因为我们引用不存在的网格线，宽度为0的隐式轨道的就会被创建用与填补间隙。我们可以使用 grid-auto-columns 和 grid-auto-rows属性来指定这些隐式轨道的宽度：</p><pre><code class="bash">.container {  grid-auto-columns: 60px;}</code></pre><p><img src="/images/2018-10-17/grid33.jpg" alt=""></p><h2 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h2><p>如果你存在没有显示指明放置在网格上的 grid item，则自动放置算法会自动放置这些项目。 而该属性则用于控制自动布局算法的工作方式。</p><p>值：</p><p>row – 告诉自动布局算法依次填充每行，根据需要添加新行<br>column – 告诉自动布局算法依次填充每列，根据需要添加新列<br>dense – 告诉自动布局算法，如果后面出现较小的 grid item，则尝试在网格中填充空洞</p><pre><code class="bash">.container {  grid-auto-flow: row | column | row dense | column dense}</code></pre><p>需要注意的是，dense 可能导致您的 grid item 乱序。</p><p>举例， 考虑如下 HTML：</p><pre><code class="bash">&lt;section class=<span class="string">"container"</span>&gt;  &lt;div class=<span class="string">"item-a"</span>&gt;item<span class="_">-a</span>&lt;/div&gt;  &lt;div class=<span class="string">"item-b"</span>&gt;item-b&lt;/div&gt;  &lt;div class=<span class="string">"item-c"</span>&gt;item-c&lt;/div&gt;  &lt;div class=<span class="string">"item-d"</span>&gt;item<span class="_">-d</span>&lt;/div&gt;  &lt;div class=<span class="string">"item-e"</span>&gt;item<span class="_">-e</span>&lt;/div&gt;&lt;/section&gt;</code></pre><p>你定义一个有5列和2行的网格，并将 grid-auto-flow 设置为 row（这也是默认值）：</p><pre><code class="bash">.container {  display: grid;  grid-template-columns: 60px 60px 60px 60px 60px;  grid-template-rows: 30px 30px;  grid-auto-flow: row;}</code></pre><p>当把 grid item 放在网格上时，你只把其中两个设置了固定的位置：</p><pre><code class="bash">.item<span class="_">-a</span> {  grid-column: 1;  grid-row: 1 / 3;}.item<span class="_">-e</span> {  grid-column: 5;  grid-row: 1 / 3;}</code></pre><p>因为我们将 grid-auto-flow 设置为row，所以我们的grid就像这样。 注意观察我们没有做设置的三个项目（item-b，item-c和item-d）是如何在剩余的行水平摆放位置的：</p><p><img src="/images/2018-10-17/grid34.jpg" alt=""></p><p>如果我们将 grid-auto-flow 设置为 column，则 item-b，item-c 和 item-d 以列的顺序上下摆放：</p><pre><code class="bash">.container {  display: grid;  grid-template-columns: 60px 60px 60px 60px 60px;  grid-template-rows: 30px 30px;  grid-auto-flow: column;}</code></pre><p><img src="/images/2018-10-17/grid35.jpg" alt=""></p><h2 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h2><p>在单个属性中设置所有以下属性的简写：grid-template-rows，grid-template-columns，grid-template-areas，grid-auto-rows，grid-auto-columns和grid-auto-flow。 它同时也将 sets grid-column-gap 和 grid-row-gap 设置为它们的初始值，即使它们不能被此属性显示设置。</p><p>值：</p><p>none – 将所有子属性设置为其初始值</p><pre><code class="bash">&lt;grid-template-rows&gt; / &lt;grid-template-columns&gt; – 将 grid-template-rows 和 grid-template-columns 分别设置为指定值，将所有其他子属性设置为其初始值&lt;grid-auto-flow&gt; [&lt;grid-auto-rows&gt; [ / &lt;grid-auto-columns&gt;] ] – 接受所有与grid-auto-flow，grid-auto-rows和grid-auto-columns相同的值。 如果省略grid-auto-columns，则将其设置为为grid-auto-rows指定的值。 </code></pre><p>如果两者都被省略，则它们被设置为它们的初始值</p><pre><code class="bash">.container {    grid: none | &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt; | &lt;grid-auto-flow&gt; [&lt;grid-auto-rows&gt; [/ &lt;grid-auto-columns&gt;]];}</code></pre><p>举例：</p><p>以下代码写法等价</p><pre><code class="bash">.container {  grid: 200px auto / 1fr auto 1fr;}.container {  grid-template-rows: 200px auto;  grid-template-columns: 1fr auto 1fr;  grid-template-areas: none;}</code></pre><p>以下代码写法等价</p><pre><code class="bash">.container {  grid: column 1fr / auto;}.container {  grid-auto-flow: column;  grid-auto-rows: 1fr;  grid-auto-columns: auto;}</code></pre><p>它也可用使用一个更复杂但相当方便的语法来一次设置所有内容。 你可以指定 grid-template-areas、grid-template-rows 以及 grid-template-columns，并将所有其他子属性设置为其初始值。 你现在所做的是在其网格区域内，指定网格线名称和内联轨道大小。 可以看下面的例子：</p><pre><code class="bash">.container {  grid: [row1-start] <span class="string">"header header header"</span> 1fr [row1-end]        [row2-start] <span class="string">"footer footer footer"</span> 25px [row2-end]        / auto 50px auto;}</code></pre><p>上述代码等价于</p><pre><code class="bash">.container {  grid-template-areas:     <span class="string">"header header header"</span>    <span class="string">"footer footer footer"</span>;  grid-template-rows: [row1-start] 1fr [row1-end row2-start] 25px [row2-end];  grid-template-columns: auto 50px auto;    }</code></pre><h1 id="孩子-Grid-Items-的属性"><a href="#孩子-Grid-Items-的属性" class="headerlink" title="孩子(Grid Items)的属性"></a>孩子(Grid Items)的属性</h1><h2 id="grid-column-start-grid-column-end-grid-row-start-grid-row-end"><a href="#grid-column-start-grid-column-end-grid-row-start-grid-row-end" class="headerlink" title="grid-column-start / grid-column-end / grid-row-start /grid-row-end"></a>grid-column-start / grid-column-end / grid-row-start /grid-row-end</h2><p>使用特定的网格线确定 grid item 在网格内的位置。grid-column-start/grid-row-start 属性表示grid item的网格线的起始位置，grid-column-end/grid-row-end属性表示网格项的网格线的终止位置。</p><p>值：</p><pre><code class="bash">&lt;line&gt;: 可以是一个数字来指代相应编号的网格线，也可使用名称指代相应命名的网格线span &lt;number&gt;: 网格项将跨越指定数量的网格轨道span &lt;name&gt;: 网格项将跨越一些轨道，直到碰到指定命名的网格线auto: 自动布局， 或者自动跨越， 或者跨越一个默认的轨道</code></pre><pre><code class="bash">.item {  grid-column-start: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto  grid-column-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto  grid-row-start: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto  grid-row-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto}</code></pre><p>举例：</p><pre><code class="bash">.item<span class="_">-a</span> {  grid-column-start: 2;  grid-column-end: five;  grid-row-start: row1-start  grid-row-end: 3}</code></pre><p><img src="/images/2018-10-17/grid36.jpg" alt=""></p><pre><code class="bash">.item-b {  grid-column-start: 1;  grid-column-end: span col4-start;  grid-row-start: 2  grid-row-end: span 2}</code></pre><p><img src="/images/2018-10-17/grid37.jpg" alt=""></p><p>如果没有声明 grid-column-end / grid-row-end，默认情况下，该网格项将跨越1个轨道。</p><p>网格项可以相互重叠。 您可以使用z-index来控制它们的堆叠顺序。</p><h2 id="grid-column-grid-row"><a href="#grid-column-grid-row" class="headerlink" title="grid-column / grid-row"></a>grid-column / grid-row</h2><p>grid-column-start + grid-column-end, 和 grid-row-start + grid-row-end 的简写形式。</p><p>值：</p><pre><code class="bash">&lt;start-line&gt; / &lt;end-line&gt; – 每个值的用法都和属性分开写时的用法一样.item {  grid-column: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;  grid-row: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;}</code></pre><p>举例：</p><pre><code class="bash">.item-c {  grid-column: 3 / span 2;  grid-row: third-line / 4;}</code></pre><p><img src="/images/2018-10-17/grid38.jpg" alt=""></p><p>如果没有指定结束行值，则该网格项默认跨越1个轨道。</p><p>grid-area<br>给 grid item 进行命名以便于使用 grid-template-areas 属性创建模板时来进行引用。另外也可以做为 grid-row-start + grid-column-start + grid-row-end + grid-column-end 的简写形式。</p><p>值：</p><pre><code class="bash">&lt;name&gt; – 你的命名&lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt; – 可以是数字，也可以是网格线的名字</code></pre><pre><code class="bash">.item {  grid-area: &lt;name&gt; | &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;}</code></pre><p>举例:</p><p>给一个网格项命名</p><pre><code class="bash">.item<span class="_">-d</span> {  grid-area: header}</code></pre><p>作为 grid-row-start + grid-column-start + grid-row-end + grid-column-end 的简写:</p><pre><code class="bash">.item<span class="_">-d</span> {  grid-area: 1 / col4-start / last-line / 6}</code></pre><p><img src="/images/2018-10-17/grid39.jpg" alt=""></p><h2 id="justify-self"><a href="#justify-self" class="headerlink" title="justify-self"></a>justify-self</h2><p>沿着行轴对齐grid item 里的内容（与之对应的是 align-self, 即沿列轴对齐）。 此属性对单个网格项内的内容生效。</p><p>值：</p><p>start – 将内容对齐到网格区域的左端<br>end – 将内容对齐到网格区域的右端<br>center – 将内容对齐到网格区域的中间<br>stretch – 填充网格区域的宽度 (这是默认值)<br>举例：</p><pre><code class="bash">.item<span class="_">-a</span> {  justify-self: start;}</code></pre><p><img src="/images/2018-10-17/grid40.jpg" alt=""></p><pre><code class="bash">.item<span class="_">-a</span> {  justify-self: end;}</code></pre><p><img src="/images/2018-10-17/grid41.jpg" alt=""></p><pre><code class="bash">.item<span class="_">-a</span> {  justify-self: center;}</code></pre><p><img src="/images/2018-10-17/grid42.jpg" alt=""></p><pre><code class="bash">.item<span class="_">-a</span> {  justify-self: stretch;}</code></pre><p><img src="/images/2018-10-17/grid43.jpg" alt=""></p><p>要为网格中的所有grid items 设置对齐方式，也可以通过 justify-items 属性在网格容器上设置此行为。</p><p>align-self<br>沿着列轴对齐grid item 里的内容（与之对应的是 justify-self, 即沿行轴对齐）。 此属性对单个网格项内的内容生效。</p><p>值：</p><p>start – 将内容对齐到网格区域的顶部<br>end – 将内容对齐到网格区域的底部<br>center – 将内容对齐到网格区域的中间<br>stretch – 填充网格区域的高度 (这是默认值)</p><pre><code class="bash">.item {  align-self: start | end | center | stretch;}</code></pre><p>举例:</p><pre><code class="bash">.item<span class="_">-a</span> {  align-self: start;}</code></pre><p><img src="/images/2018-10-17/grid44.jpg" alt=""></p><pre><code class="bash">.item<span class="_">-a</span> {  align-self: end;}</code></pre><p><img src="/images/2018-10-17/grid45.jpg" alt=""></p><pre><code class="bash">.item<span class="_">-a</span> {  align-self: center;}</code></pre><p><img src="/images/2018-10-17/grid46.jpg" alt=""></p><pre><code class="bash">.item<span class="_">-a</span> {  align-self: stretch;}</code></pre><p><img src="/images/2018-10-17/grid47.jpg" alt=""></p><p>要为网格中的所有grid items 统一设置对齐方式，也可以通过 align-items 属性在网格容器上设置此行为。</p><h1 id="终于COPY完了，以上部分来自饥人谷"><a href="#终于COPY完了，以上部分来自饥人谷" class="headerlink" title="终于COPY完了，以上部分来自饥人谷"></a>终于COPY完了，以上部分来自<a href="https://blog.jirengu.com/?p=990#comments" target="_blank" rel="noopener">饥人谷</a></h1><h1 id="fr-单位-等分"><a href="#fr-单位-等分" class="headerlink" title="fr 单位(等分)"></a>fr 单位(等分)</h1><p>fr 是为网格布局定义的一个新单位。它可以帮助你摆脱计算百分比，并将可用空间等分。</p><p>例如，如果在网格容器中设置这个规则：grid-template-rows: 2fr 3fr，那么你的网格容器将首先被分成 2 行。然后将数字部分加在一起，这里总和为 5， 即 5 等分。</p><p>就是说，我们将有 2 行：第一排占据垂直空间的 2/5 。 第二排占垂直空间的 3/5 。</p><p>用fr来个有3行3列的布局怎么实现？</p><pre><code class="bash">.container {    display: grid;    grid-template-rows: 1fr 1fr 1fr;    grid-template-columns: 1fr 1fr 1fr;}</code></pre><p>这里特别需要注意的是： fr 单位是等分可用空间，或者说剩余空间。看个例子</p><pre><code class="bash">.container {    grid-gap:2px;    display: grid;    width:300px;    height:200px;    grid-template-rows: 100px 1fr 1fr;    grid-template-columns: 1fr 50px 1fr;}</code></pre><p><img src="/images/2018-10-17/grid48.png" alt=""><br>你会看到 fr 单位是将 总的尺寸 减去 单元格明确尺寸后，在等分剩余空间。 grid-gap 是间隔。</p><h1 id="repeat-函数"><a href="#repeat-函数" class="headerlink" title="repeat() 函数"></a>repeat() 函数</h1><p>在某些情况下，我们可能有很多的列和行。在 grid-template 属性中指定每一个值可能会很乏味。幸运的是，有一个 repeat 函数，就像任何一个循环重复多少次输出某个给定值。它有两个参数。第一个是迭代次数，第二个是要重复的值。我们用 repeat 函数重写上面的例子。</p><pre><code class="bash">.container {    display: grid;    grid-template-rows: repeat(3, 1fr);    grid-template-columns: repeat(3, 1fr);}</code></pre><p>等价于：</p><pre><code class="bash">.container {    display: grid;    grid-template-rows: 1fr 1fr 1fr;    grid-template-columns: 1fr 1fr 1fr;}</code></pre><p>参考学习网址</p><p><a href="http://www.css88.com/archives/8675" target="_blank" rel="noopener">http://www.css88.com/archives/8675</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 网格布局(Grid Layout) 是CSS中最强大的布局系统。 这是一个二维系统，这意味着它可以同时处理列和行，不像 flexbox 那样主要是一维系统。 你可以通过将CSS规则应用于父元素（成为网格容器）和该元素的子元素（网格元素），来使用网格布局。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://zhouyanwei.cn/categories/css/"/>
    
    
      <category term="grid" scheme="http://zhouyanwei.cn/tags/grid/"/>
    
  </entry>
  
  <entry>
    <title>前端跨域方案</title>
    <link href="http://zhouyanwei.cn/2018/09/25/proxy/"/>
    <id>http://zhouyanwei.cn/2018/09/25/proxy/</id>
    <published>2018-09-24T16:00:00.000Z</published>
    <updated>2018-09-25T08:27:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>做了一份关于跨域的ppt,主要讲解了，使用vue-cli、nginx、node.js进行跨域处理。欢迎下载观看。</p><p><a href="../../../../link/2018-09-25/proxy.pptx">PPT请点击这里下载</a></p><p>下面附上几张照片，node.js跨域源码在下面。</p><a id="more"></a><p><img src="/images/2018-09-25/proxy1.png" alt=""><br><img src="/images/2018-09-25/proxy2.png" alt=""><br><img src="/images/2018-09-25/proxy3.png" alt=""><br><img src="/images/2018-09-25/proxy4.png" alt=""></p><p>proxy.js</p><pre><code class="bash">var PORT = 3000;var http = require(<span class="string">'http'</span>);var url=require(<span class="string">'url'</span>);var fs=require(<span class="string">'fs'</span>);var mine=require(<span class="string">'./mime'</span>).types;var path=require(<span class="string">'path'</span>);var httpProxy = require(<span class="string">'http-proxy'</span>);var proxy = httpProxy.createProxyServer({    target: <span class="string">'http://192.168.2.18:8080/'</span>,   //接口地址    // 下面的设置用于https    // ssl: {    //     key: fs.readFileSync(<span class="string">'server_decrypt.key'</span>, <span class="string">'utf8'</span>),    //     cert: fs.readFileSync(<span class="string">'server.crt'</span>, <span class="string">'utf8'</span>)    // },    // secure: <span class="literal">false</span>});proxy.on(<span class="string">'error'</span>, <span class="keyword">function</span>(err, req, res){    res.writeHead(500, {        <span class="string">'content-type'</span>: <span class="string">'text/plain'</span>    });    console.log(err);    res.end(<span class="string">'Something went wrong. And we are reporting a custom error message.'</span>);});var server = http.createServer(<span class="keyword">function</span> (request, response) {    var pathname = url.parse(request.url).pathname;    //var realPath = path.join(<span class="string">"main-pages"</span>, pathname); // 指定根目录    var realPath = path.join(<span class="string">"./"</span>, pathname);    console.log(pathname);    console.log(realPath);    var ext = path.extname(realPath);    ext = ext ? ext.slice(1) : <span class="string">'unknown'</span>;    //判断如果是接口访问，则通过proxy转发    <span class="keyword">if</span>(pathname.indexOf(<span class="string">"meis"</span>) &gt; 0){        proxy.web(request, response);        <span class="built_in">return</span>;    }    fs.exists(realPath, <span class="keyword">function</span> (exists) {        <span class="keyword">if</span> (!exists) {            response.writeHead(404, {                <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>            });            response.write(<span class="string">"This request URL "</span> + pathname + <span class="string">" was not found on this server."</span>);            response.end();        } <span class="keyword">else</span> {            fs.readFile(realPath, <span class="string">"binary"</span>, <span class="keyword">function</span> (err, file) {                <span class="keyword">if</span> (err) {                    response.writeHead(500, {                        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>                    });                    response.end(err);                } <span class="keyword">else</span> {                    var contentType = mine[ext] || <span class="string">"text/plain"</span>;                    response.writeHead(200, {                        <span class="string">'Content-Type'</span>: contentType                    });                    response.write(file, <span class="string">"binary"</span>);                    response.end();                }            });        }    });});server.listen(PORT);console.log(<span class="string">"Server runing at port: "</span> + PORT + <span class="string">"."</span>);</code></pre><p>mime.js</p><pre><code class="bash">exports.types = {    <span class="string">"css"</span>: <span class="string">"text/css"</span>,    <span class="string">"gif"</span>: <span class="string">"image/gif"</span>,    <span class="string">"html"</span>: <span class="string">"text/html"</span>,    <span class="string">"ico"</span>: <span class="string">"image/x-icon"</span>,    <span class="string">"jpeg"</span>: <span class="string">"image/jpeg"</span>,    <span class="string">"jpg"</span>: <span class="string">"image/jpeg"</span>,    <span class="string">"js"</span>: <span class="string">"text/javascript"</span>,    <span class="string">"json"</span>: <span class="string">"application/json"</span>,    <span class="string">"pdf"</span>: <span class="string">"application/pdf"</span>,    <span class="string">"png"</span>: <span class="string">"image/png"</span>,    <span class="string">"svg"</span>: <span class="string">"image/svg+xml"</span>,    <span class="string">"swf"</span>: <span class="string">"application/x-shockwave-flash"</span>,    <span class="string">"tiff"</span>: <span class="string">"image/tiff"</span>,    <span class="string">"txt"</span>: <span class="string">"text/plain"</span>,    <span class="string">"wav"</span>: <span class="string">"audio/x-wav"</span>,    <span class="string">"wma"</span>: <span class="string">"audio/x-ms-wma"</span>,    <span class="string">"wmv"</span>: <span class="string">"video/x-ms-wmv"</span>,    <span class="string">"xml"</span>: <span class="string">"text/xml"</span>,    <span class="string">"woff"</span>: <span class="string">"application/x-woff"</span>,    <span class="string">"woff2"</span>: <span class="string">"application/x-woff2"</span>,    <span class="string">"tff"</span>: <span class="string">"application/x-font-truetype"</span>,    <span class="string">"otf"</span>: <span class="string">"application/x-font-opentype"</span>,    <span class="string">"eot"</span>: <span class="string">"application/vnd.ms-fontobject"</span>};</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了一份关于跨域的ppt,主要讲解了，使用vue-cli、nginx、node.js进行跨域处理。欢迎下载观看。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../../../../link/2018-09-25/proxy.pptx&quot;&gt;PPT请点击这里下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面附上几张照片，node.js跨域源码在下面。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="vue" scheme="http://zhouyanwei.cn/tags/vue/"/>
    
      <category term="node.js" scheme="http://zhouyanwei.cn/tags/node-js/"/>
    
      <category term="nginx" scheme="http://zhouyanwei.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3 + ElementUI</title>
    <link href="http://zhouyanwei.cn/2018/09/03/vue-cli/"/>
    <id>http://zhouyanwei.cn/2018/09/03/vue-cli/</id>
    <published>2018-09-02T16:00:00.000Z</published>
    <updated>2018-09-30T02:46:25.583Z</updated>
    
    <content type="html"><![CDATA[<p>使用vue-cli3脚手架搭配ElementUI做了一个简单的PC后台管理系统<br><a href="../../../../link/2018-09-03/dist/index.html" target="_black">连接地址</a><br>账号密码随便输,不写也行。<br><a href="https://github.com/zywkuo/vue-cli-demo-pc" target="_blank" rel="noopener">github源码在这里</a><br>下载在下来后安装依赖，启动项目应该就可以看了。</p><p>我也在学习中，持续更新。。。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用vue-cli3脚手架搭配ElementUI做了一个简单的PC后台管理系统&lt;br&gt;&lt;a href=&quot;../../../../link/2018-09-03/dist/index.html&quot; target=&quot;_black&quot;&gt;连接地址&lt;/a&gt;&lt;br&gt;账号密码随便输,不写也行
      
    
    </summary>
    
      <category term="VUE" scheme="http://zhouyanwei.cn/categories/VUE/"/>
    
    
      <category term="vue" scheme="http://zhouyanwei.cn/tags/vue/"/>
    
      <category term="cli3" scheme="http://zhouyanwei.cn/tags/cli3/"/>
    
      <category term="ElementUI" scheme="http://zhouyanwei.cn/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>rest参数(...变量名)和扩展运算符(...)</title>
    <link href="http://zhouyanwei.cn/2018/08/23/(...)/"/>
    <id>http://zhouyanwei.cn/2018/08/23/(...)/</id>
    <published>2018-08-22T16:00:00.000Z</published>
    <updated>2018-08-23T02:57:47.509Z</updated>
    
    <content type="html"><![CDATA[<p>之前写的一篇数组去重的方法，这样写的。</p><pre><code class="bash">const array = [1,1,2,3,4,5,5,6,6,7,8,8];<span class="keyword">function</span> <span class="function"><span class="title">distinct</span></span>(){    <span class="built_in">let</span> arr = [].concat.apply([], arguments);    console.log(arr);    <span class="built_in">return</span> Array.from(new Set(arr));}const a = [1,2,3,5],b = [2,5,8,6],c = [7,8,9];console.log(distinct(a,b,c));//[1, 2, 3, 5, 8, 6, 7, 9]</code></pre><a id="more"></a><p>后来我一想，既然都用ES6了，不如都用ES6语法吧。然后我就把代码改成这样了。</p><pre><code class="bash">distinct = () =&gt; {    <span class="built_in">let</span> arr = [].concat.apply([], arguments);    <span class="built_in">return</span> Array.from(new Set(arr));}console.log(distinct(array));//Uncaught ReferenceError: arguments is not defined</code></pre><p>报错了，让后查找了一下原因，使用为箭头函数没有arguments，怎么办，这就需要用rest参数了。</p><pre><code class="bash">const a = [1,2,3,5],b = [2,5,8,6],c = [7,8,9];distinct = (...theArgs) =&gt; {    <span class="built_in">let</span> arr = [].concat.apply([], theArgs);    <span class="built_in">return</span> Array.from(new Set(arr));}console.log(distinct(a,b,c));//[1, 2, 3, 5, 8, 6, 7, 9]</code></pre><p>这个<code>...theArgs</code>就是rest参数了，theArgs是自定义的命名，可以随便起名字。</p><h1 id="rest参数-…变量名"><a href="#rest参数-…变量名" class="headerlink" title="rest参数(…变量名)"></a>rest参数(…变量名)</h1><p>最主要用于不定参数，用于获取函数多余的参数，将多余的逗号分隔的参数序列转换为数组参数</p><p>rest参数的语法</p><pre><code class="bash"><span class="keyword">function</span> f(a, b, ...theArgs) {  // ...}</code></pre><p>看一个小例子</p><pre><code class="bash">fun1 = (...theArgs) =&gt; {    console.log(theArgs);}fun1(1, 2, 3, 4, 5, 6);//[1, 2, 3, 4, 5, 6]fun2 = (a, b, ...theArgs) =&gt; {    console.log(theArgs);//[3, 4, 5, 6]}fun2(1, 2, 3, 4, 5, 6);</code></pre><p>注意：rest参数只能是最后一个参数，他代表除a,b以外的所有参数，如果后面在添加别参数，例如</p><pre><code class="bash">fun2 = (a, b, ...theArgs, c) =&gt; {    console.log(theArgs);}fun2(1, 2, 3, 4, 5, 6);Uncaught SyntaxError: Rest parameter must be last formal parameter</code></pre><p>这样是会报错的。</p><p>说到这里这个<code>...</code>还有一个作用就是作为扩展运算符</p><h1 id="扩展运算符-…"><a href="#扩展运算符-…" class="headerlink" title="扩展运算符(…)"></a>扩展运算符(…)</h1><p>扩展运算符可以理解为rest参数的逆运算，将数组转换为逗号分隔的参数序列</p><pre><code class="bash">const nums = [1, 2, 3];fun = (a, b, c) =&gt; {    console.log(`<span class="variable">${a}</span> <span class="variable">${b}</span> <span class="variable">${c}</span>`)}fun(...nums);//1 2 3</code></pre><p>ES5的话我们还需要这样调用</p><pre><code class="bash">fun.apply(null,nums);</code></pre><h1 id="扩展运算符应用"><a href="#扩展运算符应用" class="headerlink" title="扩展运算符应用"></a>扩展运算符应用</h1><h2 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h2><pre><code class="bash">const arr1 = [1, 2, 3]const arr2 = [5, 6]ES5console.log(arr1.concat(arr2));//[1, 2, 3, 5, 6]ES6console.log([...arr1, ...arr2]);//[1, 2, 3, 5, 6]</code></pre><h2 id="判断最大值最小值"><a href="#判断最大值最小值" class="headerlink" title="判断最大值最小值"></a>判断最大值最小值</h2><pre><code class="bash">const array = [1,1,2,3,4,5,5,6,6,7,8,8];ES5console.log( Math.max.apply(null, array));//8console.log( Math.min.apply(null, array));//1ES6console.log( Math.max(...array));//8console.log( Math.min(...array));//1</code></pre><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><pre><code class="bash">const array = [1,1,2,3,4,5,5,6,6,7,8,8];const distinct = arr =&gt; [...new Set(arr)];console.log(distinct(array));//[1, 2, 3, 4, 5, 6, 7, 8]</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写的一篇数组去重的方法，这样写的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;const array = [1,1,2,3,4,5,5,6,6,7,8,8];
&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;distinct&lt;/span&gt;&lt;/span&gt;(){
    &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; arr = [].concat.apply([], arguments);
    console.log(arr);
    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; Array.from(new Set(arr));
}
const a = [1,2,3,5],b = [2,5,8,6],c = [7,8,9];
console.log(distinct(a,b,c));//[1, 2, 3, 5, 8, 6, 7, 9]
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://zhouyanwei.cn/categories/ES6/"/>
    
    
      <category term="rest参数" scheme="http://zhouyanwei.cn/tags/rest%E5%8F%82%E6%95%B0/"/>
    
      <category term="扩展运算符" scheme="http://zhouyanwei.cn/tags/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>position:sticky</title>
    <link href="http://zhouyanwei.cn/2018/08/21/sticky/"/>
    <id>http://zhouyanwei.cn/2018/08/21/sticky/</id>
    <published>2018-08-20T16:00:00.000Z</published>
    <updated>2018-08-21T07:24:28.203Z</updated>
    
    <content type="html"><![CDATA[<p>css position属性的值有absolute、fixed、relative、static、inherit等，<br>今天发现一个新的值 sticky 粘性定位，该定位基于用户滚动的位置。</p><a id="more"></a><p>这个属性比较不错，遗憾的是兼容性还不是很好，先来张图看一下<br><img src="/images/2018-08-21/sticky.png" alt=""></p><p>再来看一下他能干什么，比如说我一片文章有6个标题，让后读者读到每个标题对应的内容的时候让标题在顶部显示，看demo。</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="YOzJoP" data-default-tab="css,result" data-user="zywkuo" data-pen-title="YOzJoP" class="codepen">See the Pen <a href="https://codepen.io/zywkuo/pen/YOzJoP/" target="_blank" rel="noopener">YOzJoP</a> by 周艳伟 (<a href="https://codepen.io/zywkuo" target="_blank" rel="noopener">@zywkuo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>还有一些移动端页面标题固定顶部，看这个demo</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="dqywNV" data-default-tab="html,result" data-user="zywkuo" data-pen-title="sticky2" class="codepen">See the Pen <a href="https://codepen.io/zywkuo/pen/dqywNV/" target="_blank" rel="noopener">sticky2</a> by 周艳伟 (<a href="https://codepen.io/zywkuo" target="_blank" rel="noopener">@zywkuo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>这个属性值还是很不错的，用起来是不是感觉很方便，如果用js的话还需要进行判断高度在做处理相对来说还是这个简便快捷。</p><p>希望赶快普及吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css position属性的值有absolute、fixed、relative、static、inherit等，&lt;br&gt;今天发现一个新的值 sticky 粘性定位，该定位基于用户滚动的位置。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://zhouyanwei.cn/categories/css/"/>
    
    
      <category term="position:sticky" scheme="http://zhouyanwei.cn/tags/position-sticky/"/>
    
  </entry>
  
  <entry>
    <title>js数组去重</title>
    <link href="http://zhouyanwei.cn/2018/08/10/distinct/"/>
    <id>http://zhouyanwei.cn/2018/08/10/distinct/</id>
    <published>2018-08-09T16:00:00.000Z</published>
    <updated>2018-08-10T02:15:52.828Z</updated>
    
    <content type="html"><![CDATA[<p>数组去重，老生常谈，记录我觉得比较好的方法<br><a id="more"></a></p><h1 id="ES5方法"><a href="#ES5方法" class="headerlink" title="ES5方法"></a>ES5方法</h1><h2 id="利用对象唯一属性进行去重"><a href="#利用对象唯一属性进行去重" class="headerlink" title="利用对象唯一属性进行去重"></a>利用对象唯一属性进行去重</h2><pre><code class="bash">var array = [1,1,2,3,4,5,5,6,6,7,8,8];Array.prototype.distinct = <span class="function"><span class="title">function</span></span> () {    var array = [];    var obj = {};    <span class="keyword">for</span>(var i=0;i&lt;this.length;i++){        <span class="keyword">if</span>(!obj[this[i]]){            array.push(this[i]);            obj[this[i]] = 1;        }    }    <span class="built_in">return</span> array;}console.log(array.distinct());//[1, 2, 3, 4, 5, 6, 7, 8]</code></pre><h2 id="利用indexOf属性进行判断"><a href="#利用indexOf属性进行判断" class="headerlink" title="利用indexOf属性进行判断"></a>利用indexOf属性进行判断</h2><pre><code class="bash">var array = [1,1,2,3,4,5,5,6,6,7,8,8];Array.prototype.distinct = <span class="function"><span class="title">function</span></span> () {    var array = [this[0]];    <span class="keyword">for</span>(var i=0;i&lt;this.length;i++){        <span class="keyword">if</span>(array.indexOf(this[i]) == -1){            array.push(this[i])        }    }    <span class="built_in">return</span> array;}console.log(array.distinct());//[1, 2, 3, 4, 5, 6, 7, 8]</code></pre><h1 id="ES6方法"><a href="#ES6方法" class="headerlink" title="ES6方法"></a>ES6方法</h1><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。利用他的唯一性就可以进行去重了。</p><pre><code class="bash">const array = [1,1,2,3,4,5,5,6,6,7,8,8];console.log(new Set(array));//{1, 2, 3, 4, 5, 6, 7, 8}</code></pre><p>此时可以看到原数组已经已经去重了，但是此时结构还不是数组的结构，因此我们还需要用到Array.from方法，Array.from方法可以将 Set 结构转为数组。</p><pre><code class="bash">const array = [1,1,2,3,4,5,5,6,6,7,8,8];console.log(Array.from(new Set(array)));//[1, 2, 3, 4, 5, 6, 7, 8]</code></pre><p>记录一个多个数组合并去重的好方法</p><pre><code class="bash"><span class="keyword">function</span> <span class="function"><span class="title">distinct</span></span>(){    <span class="built_in">let</span> arr = [].concat.apply([], arguments);    console.log(arr);    <span class="built_in">return</span> Array.from(new Set(arr));}const a = [1,2,3,5],b = [2,5,8,6],c = [7,8,9];console.log(distinct(a,b,c));//[1, 2, 3, 5, 8, 6, 7, 9]</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组去重，老生常谈，记录我觉得比较好的方法&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="js数组去重" scheme="http://zhouyanwei.cn/tags/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    
      <category term="ES6" scheme="http://zhouyanwei.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>:focus-within选择器</title>
    <link href="http://zhouyanwei.cn/2018/08/07/focusWithin/"/>
    <id>http://zhouyanwei.cn/2018/08/07/focusWithin/</id>
    <published>2018-08-06T16:00:00.000Z</published>
    <updated>2018-08-09T06:58:00.204Z</updated>
    
    <content type="html"><![CDATA[<p>看新闻看到了一个非常不错的选择器:focus-within，他可以做一些js的效果，focus是获取焦点，所以只能有focus状态的元素才可以使用。<br>:focus-within选择器是在元素获取焦点的时候可以触发自身或者父元素的属性（冒泡）。<br><a id="more"></a></p><p>举一个小例子<br>效果如图<br><img src="/images/2018-08-07/focus-within.gif" alt=""></p><pre><code class="bash">css.parent{            width: 100%;            height: 200px;              background: <span class="comment">#eeeeee;</span>            display: flex;            justify-content: center;            align-items: center;        }        .children{            width: 100px;            height: 60px;            background: <span class="comment">#999;</span>        }        .parent:focus-within{            background: <span class="comment">#f60;</span>        }&gt;</code></pre><pre><code class="bash">html&lt;div class=<span class="string">"parent"</span>&gt;    &lt;button class=<span class="string">"children"</span>&gt;点我&lt;/button&gt;&lt;/div&gt;</code></pre><p>写了一个选项卡的小例子效果可以看一下<br><img src="/images/2018-08-07/focus-within-nav.gif" alt=""><br><a href="https://codepen.io/zywkuo/pen/XBByzj" target="_blank" rel="noopener">具体代码可以点击此链接前往codepen查看，效果也有哦！</a></p><p>在看一下兼容问题  数据来源于<a href="https://caniuse.com/" target="_blank" rel="noopener">https://caniuse.com/</a><br><img src="/images/2018-08-07/focus-within.png" alt=""></p><p>虽然对浏览器的兼容效果还不是很好，希望快快普及吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看新闻看到了一个非常不错的选择器:focus-within，他可以做一些js的效果，focus是获取焦点，所以只能有focus状态的元素才可以使用。&lt;br&gt;:focus-within选择器是在元素获取焦点的时候可以触发自身或者父元素的属性（冒泡）。&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="http://zhouyanwei.cn/categories/css/"/>
    
    
      <category term=":focus-within" scheme="http://zhouyanwei.cn/tags/focus-within/"/>
    
  </entry>
  
  <entry>
    <title>sql语句学习</title>
    <link href="http://zhouyanwei.cn/2018/08/03/sql/"/>
    <id>http://zhouyanwei.cn/2018/08/03/sql/</id>
    <published>2018-08-02T16:00:00.000Z</published>
    <updated>2019-01-02T05:50:55.876Z</updated>
    
    <content type="html"><![CDATA[<p>sql学习记录<br><a id="more"></a><br>从 “qc_record” 表中选取所有记录 (*qc_record为一个表的名称)</p><pre><code class="bash">select * from qc_record;</code></pre><p>一些最重要的 SQL 命令（*SQL 对大小写不敏感：SELECT 与 select 是相同的。）</p><pre><code class="bash">SELECT                  - 从数据库中提取数据UPDATE                  - 更新数据库中的数据DELETE                  - 从数据库中删除数据INSERT INTO             - 向数据库中插入新数据CREATE DATABASE         - 创建新数据库ALTER DATABASE          - 修改数据库CREATE TABLE            - 创建新表ALTER TABLE             - 变更（改变）数据库表DROP TABLE              - 删除表CREATE INDEX            - 创建索引（搜索键）DROP INDEX              - 删除索引</code></pre><h1 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h1><p>SELECT 语句用于从数据库中选取数据。结果被存储在一个结果表中，称为结果集。</p><p>SQL SELECT 语法</p><pre><code class="bash">select * from qc_record;     查询整个表内容select column_name,column_name from qc_record;      -- column_name(查询表内某一列名称可查询多个)</code></pre><h1 id="SELECT-DISTINCT-语句"><a href="#SELECT-DISTINCT-语句" class="headerlink" title="SELECT DISTINCT 语句"></a>SELECT DISTINCT 语句</h1><p>在表中，一个列可能会包含多个重复值，有时您也许希望仅仅列出不同（distinct）的值。DISTINCT 关键词用于返回唯一不同的值。</p><p>SQL SELECT DISTINCT 语法</p><pre><code class="bash">select distinct column_name,column_name from qc_record;     -- column_name(查询表内某一列名称可查询多个)</code></pre><h1 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h1><p>WHERE 子句用于提取那些满足指定标准的记录。</p><p>WHERE 语法</p><pre><code class="bash">select * from qc_record <span class="built_in">where</span> column_name operator value;      -- 查找qc_record表中匹配column_name operator value（匹配表达式）的记录select column_name,column_name from qc_record <span class="built_in">where</span> column_name operator value;     -- 查找qc_record表中对应名称的匹配column_name operator value（匹配表达式）的记录</code></pre><p>SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值字段，请不要使用引号。</p><p>WHERE 子句中的运算符</p><pre><code class="bash">运算符        描述=            等于&lt;&gt;            不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !=&gt;            大于&lt;            小于&gt;=            大于等于&lt;=            小于等于BETWEEN        在某个范围内LIKE        搜索某种模式IN            指定针对某个列的多个可能值</code></pre><p>后记，在查询语句的时候用到了模糊查询，</p><p>LIKE 条件匹配模式</p><pre><code class="bash">% 包含零个或更多字符的任意字符串。_（下划线） 任何单个字符。[ ] 指定范围（例如 [a<span class="_">-f</span>]）或集合（例如 [abcdef]）内的任何单个字符。[^] 不在指定范围（例如 [^a - f]）或集合（例如 [^abcdef]）内的任何单个字符。</code></pre><h1 id="AND-amp-OR-运算符"><a href="#AND-amp-OR-运算符" class="headerlink" title="AND &amp; OR 运算符"></a>AND &amp; OR 运算符</h1><p>AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤。<br>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。<br>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p><p>AND 语法</p><pre><code class="bash">select * from qc_record <span class="built_in">where</span> test_user = <span class="string">'zyw'</span> and device_id = 19222;   -- 与的关系，and连接的两个名称匹配都<span class="literal">true</span>才显示</code></pre><p>OR 语法</p><pre><code class="bash">select * from qc_record <span class="built_in">where</span> test_user = <span class="string">'zyw'</span> or device_id = 19222;   -- 或的关系，or连接的两个名称有一个匹配的就显示</code></pre><p>AND OR 语法</p><pre><code class="bash">select * from qc_record <span class="built_in">where</span> test_user = <span class="string">'zyw'</span> and (device_id = 19121 or status = 1);   -- 也可以把 AND 和 OR 结合起来（使用圆括号来组成复杂的表达式）</code></pre><h1 id="ORDER-BY-关键字"><a href="#ORDER-BY-关键字" class="headerlink" title="ORDER BY 关键字"></a>ORDER BY 关键字</h1><p>ORDER BY 关键字用于对结果集进行排序。<br>ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。<br>ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字。</p><p>ORDER BY 语法</p><pre><code class="bash">select * from qc_record order by create_date desc           -- ASC--&gt;升序排列默认    DESC--&gt;降序排列要写这个关键字</code></pre><h1 id="INSERT-INTO-语句"><a href="#INSERT-INTO-语句" class="headerlink" title="INSERT INTO 语句"></a>INSERT INTO 语句</h1><p>INSERT INTO 语句用于向表中插入新记录。</p><p>INSERT INTO 语法(有两种编写形式)</p><p>第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：</p><pre><code class="bash">insert into qc_record values (value1,value2,value3,...);</code></pre><p>第二种形式需要指定列名及被插入的值：</p><pre><code class="bash">insert into qc_record (column1,column2,column3,...) values (value1,value2,value3,...);</code></pre><h1 id="UPDATE-语句"><a href="#UPDATE-语句" class="headerlink" title="UPDATE 语句"></a>UPDATE 语句</h1><p>UPDATE 语句用于更新表中的记录。</p><p>UPDATE 语句</p><pre><code class="bash">update qc_record <span class="built_in">set</span> column1=value1,column2=value2,... <span class="built_in">where</span> some_column=some_value; -- WHERE 子句规定哪条记录或者哪些记录需要更新。如果您省略了 WHERE 子句，所有的记录都将被更新！</code></pre><h1 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h1><p>DELETE 语句用于删除表中的记录。</p><p>SQL DELETE 语法</p><pre><code class="bash">delete from qc_record <span class="built_in">where</span> some_column=some_value;                                 -- 删除一条属性delete from qc_record <span class="built_in">where</span> some_column=some_value and some_column=some_value ...;      -- 删除多条属性delete from qc_record                                                               -- 删除所有</code></pre><p>参考网址    <a href="http://www.runoob.com/sql/sql-tutorial.html" traget="_blank" target="_blank" rel="noopener">SQL教程|菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sql学习记录&lt;br&gt;
    
    </summary>
    
      <category term="sql" scheme="http://zhouyanwei.cn/categories/sql/"/>
    
    
      <category term="sql" scheme="http://zhouyanwei.cn/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>js模糊查询</title>
    <link href="http://zhouyanwei.cn/2018/08/01/search/"/>
    <id>http://zhouyanwei.cn/2018/08/01/search/</id>
    <published>2018-07-31T16:00:00.000Z</published>
    <updated>2018-08-01T08:23:54.510Z</updated>
    
    <content type="html"><![CDATA[<p>对于前端而言一些简单的查询还是不用需要后台配合的，前端自己也可以处理，最简单的就是用indexof判断进行显示隐藏，下面记录一个比较不错的方法，可以支持汉字、拼音、拼音首字母大写小写。</p><p>pinyin-engine 是一个简单高效的JavaScript拼音本地匹配引擎，它支持多音字，另外提供全文版支持繁体字 <a href="../../../../link/2018-08-01/PinyinEngine.js" download="PinyinEngine.js">点击此处进行下载</a></p><p><a href="../../../../link/2018-08-01/index.html" target="_black">也可以点击此处进行效果预览</a></p><p>源代码在这里</p><pre><code class="bash">&lt;!DOCTYPE html&gt;&lt;html lang=<span class="string">"en"</span>&gt;&lt;head&gt;    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=yes"</span> /&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;style&gt;    *{        margin: 0;        padding: 0;    }    input{        width: 80%;        height: 50px;        display: block;        margin: 30px auto ;        background: <span class="comment">#F0F0F0;</span>        border: 1px solid <span class="comment">#333;</span>        font-size: 26px;        text-indent: 30px;    }    <span class="comment">#cityBox{</span>        text-align: center;    }&lt;/style&gt;&lt;body&gt;    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"inp"</span>&gt;    &lt;ul id=<span class="string">"cityBox"</span>&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;script src=<span class="string">"PinyinEngine.js"</span>&gt;&lt;/script&gt;&lt;script&gt;    var demoData = [        {name: <span class="string">'海门'</span>, value: 9},        {name: <span class="string">'鄂尔多斯'</span>, value: 12},        {name: <span class="string">'招远'</span>, value: 12},        {name: <span class="string">'舟山'</span>, value: 12},        {name: <span class="string">'齐齐哈尔'</span>, value: 14},        {name: <span class="string">'盐城'</span>, value: 15},        {name: <span class="string">'赤峰'</span>, value: 16},        {name: <span class="string">'青岛'</span>, value: 18},        {name: <span class="string">'乳山'</span>, value: 18},        {name: <span class="string">'金昌'</span>, value: 19},        {name: <span class="string">'泉州'</span>, value: 21},        {name: <span class="string">'莱西'</span>, value: 21},        {name: <span class="string">'日照'</span>, value: 21},        {name: <span class="string">'胶南'</span>, value: 22},        {name: <span class="string">'南通'</span>, value: 23},        {name: <span class="string">'拉萨'</span>, value: 24},        {name: <span class="string">'云浮'</span>, value: 24},        {name: <span class="string">'梅州'</span>, value: 25},        {name: <span class="string">'文登'</span>, value: 25},        {name: <span class="string">'上海'</span>, value: 25},        {name: <span class="string">'攀枝花'</span>, value: 25},        {name: <span class="string">'威海'</span>, value: 25},        {name: <span class="string">'承德'</span>, value: 25},        {name: <span class="string">'厦门'</span>, value: 26},        {name: <span class="string">'汕尾'</span>, value: 26},        {name: <span class="string">'潮州'</span>, value: 26},        {name: <span class="string">'丹东'</span>, value: 27},        {name: <span class="string">'太仓'</span>, value: 27},        {name: <span class="string">'曲靖'</span>, value: 27},        {name: <span class="string">'烟台'</span>, value: 28},        {name: <span class="string">'福州'</span>, value: 29},        {name: <span class="string">'瓦房店'</span>, value: 30},        {name: <span class="string">'即墨'</span>, value: 30},        {name: <span class="string">'抚顺'</span>, value: 31},        {name: <span class="string">'玉溪'</span>, value: 31},        {name: <span class="string">'张家口'</span>, value: 31},        {name: <span class="string">'阳泉'</span>, value: 31},        {name: <span class="string">'莱州'</span>, value: 32},        {name: <span class="string">'湖州'</span>, value: 32},        {name: <span class="string">'汕头'</span>, value: 32},        {name: <span class="string">'昆山'</span>, value: 33},        {name: <span class="string">'宁波'</span>, value: 33},        {name: <span class="string">'湛江'</span>, value: 33},        {name: <span class="string">'揭阳'</span>, value: 34},        {name: <span class="string">'荣成'</span>, value: 34},        {name: <span class="string">'连云港'</span>, value: 35},        {name: <span class="string">'葫芦岛'</span>, value: 35},        {name: <span class="string">'常熟'</span>, value: 36},        {name: <span class="string">'东莞'</span>, value: 36},        {name: <span class="string">'河源'</span>, value: 36},        {name: <span class="string">'淮安'</span>, value: 36},        {name: <span class="string">'泰州'</span>, value: 36},        {name: <span class="string">'南宁'</span>, value: 37},        {name: <span class="string">'营口'</span>, value: 37},        {name: <span class="string">'惠州'</span>, value: 37},        {name: <span class="string">'江阴'</span>, value: 37},        {name: <span class="string">'蓬莱'</span>, value: 37},        {name: <span class="string">'韶关'</span>, value: 38},        {name: <span class="string">'嘉峪关'</span>, value: 38},        {name: <span class="string">'广州'</span>, value: 38},        {name: <span class="string">'延安'</span>, value: 38},        {name: <span class="string">'太原'</span>, value: 39},        {name: <span class="string">'清远'</span>, value: 39},        {name: <span class="string">'中山'</span>, value: 39},        {name: <span class="string">'昆明'</span>, value: 39},        {name: <span class="string">'寿光'</span>, value: 40},        {name: <span class="string">'盘锦'</span>, value: 40},        {name: <span class="string">'长治'</span>, value: 41},        {name: <span class="string">'深圳'</span>, value: 41},        {name: <span class="string">'珠海'</span>, value: 42},        {name: <span class="string">'宿迁'</span>, value: 43},        {name: <span class="string">'咸阳'</span>, value: 43},        {name: <span class="string">'铜川'</span>, value: 44},        {name: <span class="string">'平度'</span>, value: 44},        {name: <span class="string">'佛山'</span>, value: 44},        {name: <span class="string">'海口'</span>, value: 44},        {name: <span class="string">'江门'</span>, value: 45},        {name: <span class="string">'章丘'</span>, value: 45},        {name: <span class="string">'肇庆'</span>, value: 46},        {name: <span class="string">'大连'</span>, value: 47},        {name: <span class="string">'临汾'</span>, value: 47},        {name: <span class="string">'吴江'</span>, value: 47},        {name: <span class="string">'石嘴山'</span>, value: 49},        {name: <span class="string">'沈阳'</span>, value: 50},        {name: <span class="string">'苏州'</span>, value: 50},        {name: <span class="string">'茂名'</span>, value: 50},        {name: <span class="string">'嘉兴'</span>, value: 51},        {name: <span class="string">'长春'</span>, value: 51},        {name: <span class="string">'胶州'</span>, value: 52},        {name: <span class="string">'银川'</span>, value: 52},        {name: <span class="string">'张家港'</span>, value: 52},        {name: <span class="string">'三门峡'</span>, value: 53},        {name: <span class="string">'锦州'</span>, value: 54},        {name: <span class="string">'南昌'</span>, value: 54},        {name: <span class="string">'柳州'</span>, value: 54},        {name: <span class="string">'三亚'</span>, value: 54},        {name: <span class="string">'自贡'</span>, value: 56},        {name: <span class="string">'吉林'</span>, value: 56},        {name: <span class="string">'阳江'</span>, value: 57},        {name: <span class="string">'泸州'</span>, value: 57},        {name: <span class="string">'西宁'</span>, value: 57},        {name: <span class="string">'宜宾'</span>, value: 58},        {name: <span class="string">'呼和浩特'</span>, value: 58},        {name: <span class="string">'成都'</span>, value: 58},        {name: <span class="string">'大同'</span>, value: 58},        {name: <span class="string">'镇江'</span>, value: 59},        {name: <span class="string">'桂林'</span>, value: 59},        {name: <span class="string">'张家界'</span>, value: 59},        {name: <span class="string">'宜兴'</span>, value: 59},        {name: <span class="string">'北海'</span>, value: 60},        {name: <span class="string">'西安'</span>, value: 61},        {name: <span class="string">'金坛'</span>, value: 62},        {name: <span class="string">'东营'</span>, value: 62},        {name: <span class="string">'牡丹江'</span>, value: 63},        {name: <span class="string">'遵义'</span>, value: 63},        {name: <span class="string">'绍兴'</span>, value: 63},        {name: <span class="string">'扬州'</span>, value: 64},        {name: <span class="string">'常州'</span>, value: 64},        {name: <span class="string">'潍坊'</span>, value: 65},        {name: <span class="string">'重庆'</span>, value: 66},        {name: <span class="string">'台州'</span>, value: 67},        {name: <span class="string">'南京'</span>, value: 67},        {name: <span class="string">'滨州'</span>, value: 70},        {name: <span class="string">'贵阳'</span>, value: 71},        {name: <span class="string">'无锡'</span>, value: 71},        {name: <span class="string">'本溪'</span>, value: 71},        {name: <span class="string">'克拉玛依'</span>, value: 72},        {name: <span class="string">'渭南'</span>, value: 72},        {name: <span class="string">'马鞍山'</span>, value: 72},        {name: <span class="string">'宝鸡'</span>, value: 72},        {name: <span class="string">'焦作'</span>, value: 75},        {name: <span class="string">'句容'</span>, value: 75},        {name: <span class="string">'北京'</span>, value: 79},        {name: <span class="string">'徐州'</span>, value: 79},        {name: <span class="string">'衡水'</span>, value: 80},        {name: <span class="string">'包头'</span>, value: 80},        {name: <span class="string">'绵阳'</span>, value: 80},        {name: <span class="string">'乌鲁木齐'</span>, value: 84},        {name: <span class="string">'枣庄'</span>, value: 84},        {name: <span class="string">'杭州'</span>, value: 84},        {name: <span class="string">'淄博'</span>, value: 85},        {name: <span class="string">'鞍山'</span>, value: 86},        {name: <span class="string">'溧阳'</span>, value: 86},        {name: <span class="string">'库尔勒'</span>, value: 86},        {name: <span class="string">'安阳'</span>, value: 90},        {name: <span class="string">'开封'</span>, value: 90},        {name: <span class="string">'济南'</span>, value: 92},        {name: <span class="string">'德阳'</span>, value: 93},        {name: <span class="string">'温州'</span>, value: 95},        {name: <span class="string">'九江'</span>, value: 96},        {name: <span class="string">'邯郸'</span>, value: 98},        {name: <span class="string">'临安'</span>, value: 99},        {name: <span class="string">'兰州'</span>, value: 99},        {name: <span class="string">'沧州'</span>, value: 100},        {name: <span class="string">'临沂'</span>, value: 103},        {name: <span class="string">'南充'</span>, value: 104},        {name: <span class="string">'天津'</span>, value: 105},        {name: <span class="string">'富阳'</span>, value: 106},        {name: <span class="string">'泰安'</span>, value: 112},        {name: <span class="string">'诸暨'</span>, value: 112},        {name: <span class="string">'郑州'</span>, value: 113},        {name: <span class="string">'哈尔滨'</span>, value: 114},        {name: <span class="string">'聊城'</span>, value: 116},        {name: <span class="string">'芜湖'</span>, value: 117},        {name: <span class="string">'唐山'</span>, value: 119},        {name: <span class="string">'平顶山'</span>, value: 119},        {name: <span class="string">'邢台'</span>, value: 119},        {name: <span class="string">'德州'</span>, value: 120},        {name: <span class="string">'济宁'</span>, value: 120},        {name: <span class="string">'荆州'</span>, value: 127},        {name: <span class="string">'宜昌'</span>, value: 130},        {name: <span class="string">'义乌'</span>, value: 132},        {name: <span class="string">'丽水'</span>, value: 133},        {name: <span class="string">'洛阳'</span>, value: 134},        {name: <span class="string">'秦皇岛'</span>, value: 136},        {name: <span class="string">'株洲'</span>, value: 143},        {name: <span class="string">'石家庄'</span>, value: 147},        {name: <span class="string">'莱芜'</span>, value: 148},        {name: <span class="string">'常德'</span>, value: 152},        {name: <span class="string">'保定'</span>, value: 153},        {name: <span class="string">'湘潭'</span>, value: 154},        {name: <span class="string">'金华'</span>, value: 157},        {name: <span class="string">'岳阳'</span>, value: 169},        {name: <span class="string">'长沙'</span>, value: 175},        {name: <span class="string">'衢州'</span>, value: 177},        {name: <span class="string">'廊坊'</span>, value: 193},        {name: <span class="string">'菏泽'</span>, value: 194},        {name: <span class="string">'合肥'</span>, value: 229},        {name: <span class="string">'武汉'</span>, value: 273},        {name: <span class="string">'大庆'</span>, value: 279}    ];    var $ = <span class="keyword">function</span> (id) {        <span class="built_in">return</span> document.getElementById(id)    };    var <span class="variable">$cityBox</span> = $(<span class="string">'cityBox'</span>);    var <span class="variable">$input</span> = $(<span class="string">'inp'</span>);    var preVal = <span class="variable">$input</span>.value;    //重点将input内容进行search    var engine = new PinyinEngine(demoData,[<span class="string">'name'</span>]);    //初始加载    loadCity(demoData);    //加载所有数据    <span class="keyword">function</span> loadCity(data) {        //判断是否为空        <span class="keyword">if</span>(data.length === 0){            var <span class="variable">$li</span> = document.createElement(<span class="string">"li"</span>);            <span class="variable">$li</span>.innerText = <span class="string">'未找到！！！！！！'</span>;            <span class="variable">$cityBox</span>.appendChild(<span class="variable">$li</span>);            <span class="built_in">return</span> <span class="literal">false</span>;        }        //循环插入        <span class="keyword">for</span> (var i=0;i&lt;data.length;i++){            var <span class="variable">$li</span> = document.createElement(<span class="string">"li"</span>);            <span class="variable">$li</span>.innerText = data[i].name;            <span class="variable">$cityBox</span>.appendChild(<span class="variable">$li</span>)        }    }    //input改变进行search    <span class="variable">$input</span>.oninput = <span class="variable">$input</span>.onpropertychange = <span class="function"><span class="title">function</span></span> () {        var val = <span class="variable">$input</span>.value;        <span class="keyword">if</span> (val === preVal) <span class="built_in">return</span>;        preVal = <span class="variable">$input</span>.value;        <span class="keyword">if</span> (val === <span class="string">''</span>) {            loadCity(demoData);        } <span class="keyword">else</span> {            <span class="variable">$cityBox</span>.innerText = <span class="string">''</span>;            var list = engine.query(val);            loadCity(list);        };    }&lt;/script&gt;&lt;/html&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于前端而言一些简单的查询还是不用需要后台配合的，前端自己也可以处理，最简单的就是用indexof判断进行显示隐藏，下面记录一个比较不错的方法，可以支持汉字、拼音、拼音首字母大写小写。&lt;/p&gt;
&lt;p&gt;pinyin-engine 是一个简单高效的JavaScript拼音本地匹
      
    
    </summary>
    
      <category term="js" scheme="http://zhouyanwei.cn/categories/js/"/>
    
    
      <category term="模糊查询" scheme="http://zhouyanwei.cn/tags/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
</feed>
